{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/favicon.ico","path":"favicon.ico","modified":1,"renderable":0},{"_id":"themes/yelee/source/apple-touch-icon.png","path":"apple-touch-icon.png","modified":1,"renderable":1},{"_id":"themes/yelee/source/background/bg-1.jpg","path":"background/bg-1.jpg","modified":1,"renderable":1},{"_id":"themes/yelee/source/background/bg-2.jpg","path":"background/bg-2.jpg","modified":1,"renderable":1},{"_id":"themes/yelee/source/background/bg-3.jpg","path":"background/bg-3.jpg","modified":1,"renderable":1},{"_id":"themes/yelee/source/background/bg-5.jpg","path":"background/bg-5.jpg","modified":1,"renderable":1},{"_id":"themes/yelee/source/background/bg-4.jpg","path":"background/bg-4.jpg","modified":1,"renderable":1},{"_id":"themes/yelee/source/background/bg-6.jpg","path":"background/bg-6.jpg","modified":1,"renderable":1},{"_id":"themes/yelee/source/background/bg-7.jpg","path":"background/bg-7.jpg","modified":1,"renderable":1},{"_id":"themes/yelee/source/background/bg-8.jpg","path":"background/bg-8.jpg","modified":1,"renderable":1},{"_id":"themes/yelee/source/css/style.styl","path":"css/style.styl","modified":1,"renderable":1},{"_id":"themes/yelee/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":1,"renderable":1},{"_id":"themes/yelee/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/yelee/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/yelee/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/yelee/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/yelee/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/yelee/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/yelee/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/yelee/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/yelee/source/js/GithubRepoWidget.js","path":"js/GithubRepoWidget.js","modified":1,"renderable":1},{"_id":"themes/yelee/source/js/clipboard.min.js","path":"js/clipboard.min.js","modified":1,"renderable":1},{"_id":"themes/yelee/source/js/instagram.js","path":"js/instagram.js","modified":1,"renderable":1},{"_id":"themes/yelee/source/js/jquery.lazyload.js","path":"js/jquery.lazyload.js","modified":1,"renderable":1},{"_id":"themes/yelee/source/js/mobile.js","path":"js/mobile.js","modified":1,"renderable":1},{"_id":"themes/yelee/source/js/pc.js","path":"js/pc.js","modified":1,"renderable":1},{"_id":"themes/yelee/source/js/main.js","path":"js/main.js","modified":1,"renderable":1},{"_id":"themes/yelee/source/img/GitHub.png","path":"img/GitHub.png","modified":1,"renderable":1},{"_id":"themes/yelee/source/img/SegmentFault.png","path":"img/SegmentFault.png","modified":1,"renderable":1},{"_id":"themes/yelee/source/img/V2EX.png","path":"img/V2EX.png","modified":1,"renderable":1},{"_id":"themes/yelee/source/img/avatar.png","path":"img/avatar.png","modified":1,"renderable":1},{"_id":"themes/yelee/source/img/TiddlyWiki.png","path":"img/TiddlyWiki.png","modified":1,"renderable":1},{"_id":"themes/yelee/source/img/img-err.png","path":"img/img-err.png","modified":1,"renderable":1},{"_id":"themes/yelee/source/img/img-loading.png","path":"img/img-loading.png","modified":1,"renderable":1},{"_id":"themes/yelee/source/img/scrollbar_arrow.png","path":"img/scrollbar_arrow.png","modified":1,"renderable":1},{"_id":"themes/yelee/source/img/新浪微博.png","path":"img/新浪微博.png","modified":1,"renderable":1},{"_id":"themes/yelee/source/img/知乎.png","path":"img/知乎.png","modified":1,"renderable":1},{"_id":"themes/yelee/source/img/简书.png","path":"img/简书.png","modified":1,"renderable":1},{"_id":"themes/yelee/source/img/网易云音乐.png","path":"img/网易云音乐.png","modified":1,"renderable":1},{"_id":"themes/yelee/source/img/虾米音乐.png","path":"img/虾米音乐.png","modified":1,"renderable":1},{"_id":"themes/yelee/source/img/豆瓣.png","path":"img/豆瓣.png","modified":1,"renderable":1},{"_id":"themes/yelee/source/background/bg-10.jpg","path":"background/bg-10.jpg","modified":1,"renderable":1},{"_id":"themes/yelee/source/background/bg-9.jpg","path":"background/bg-9.jpg","modified":1,"renderable":1},{"_id":"themes/yelee/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/yelee/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/yelee/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/yelee/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/yelee/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/yelee/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/yelee/source/font-awesome/css/font-awesome.css","path":"font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/yelee/source/font-awesome/css/font-awesome.min.css","path":"font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/yelee/source/font-awesome/fonts/fontawesome-webfont.eot","path":"font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/yelee/source/font-awesome/fonts/FontAwesome.otf","path":"font-awesome/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/yelee/source/font-awesome/fonts/fontawesome-webfont.woff","path":"font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/yelee/source/font-awesome/fonts/fontawesome-webfont.woff2","path":"font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/yelee/source/font-awesome/fonts/fontawesome-webfont.ttf","path":"font-awesome/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/yelee/source/font-awesome/fonts/fontawesome-webfont.svg","path":"font-awesome/fonts/fontawesome-webfont.svg","modified":1,"renderable":1}],"Cache":[{"_id":"themes/yelee/.gitignore","hash":"237760b38ce80bcc3a8b556566bef0295c145393","modified":1459795231000},{"_id":"source/favicon.ico","hash":"4ce6656929cf52c6da16a791b98e624bd26ad433","modified":1460802260000},{"_id":"themes/yelee/README.md","hash":"052a9debfddb265c8d334bbdc26302d61f6a692f","modified":1459795231000},{"_id":"themes/yelee/_config.yml","hash":"6554f33da4dfa687947f3d433836ecc9f5a956ef","modified":1460813864000},{"_id":"themes/yelee/package.json","hash":"0199dfb3d44cf520b67464817d13c44a7766b8d6","modified":1459795231000},{"_id":"source/_posts/CSS学习笔记.md","hash":"15057be39cc48e8cf1f5ab7f2d1da3d9030caea2","modified":1485388027000},{"_id":"source/_posts/Git学习总结.md","hash":"7ce8ab92bd5213e2cf2408ac3e5f406dfcdd4081","modified":1460824998000},{"_id":"source/_posts/关于转岗的思考.md","hash":"57861b4091893d57f35617412d02919f48370c52","modified":1485388104000},{"_id":"source/_posts/几道前端面试题小记.md","hash":"d9c302898d53b47e833485cf66419ada172b9669","modified":1485387510000},{"_id":"source/404/index.md","hash":"4d66f0c7d59dc2c7bb8529cfda1433eaf8806ed1","modified":1460561062000},{"_id":"source/_posts/新手程序员常犯的十个错误.md","hash":"87edfdceda327412540d9c3e8975afa439bd2d59","modified":1485387637000},{"_id":"source/about/index.md","hash":"3549356f1b12643fd44193fb312d601d69bb705f","modified":1460561216000},{"_id":"source/lofter/index.md","hash":"f712c95f4a39df522b1a042355bc5fe2ab2037e0","modified":1460648677000},{"_id":"source/tags/index.md","hash":"4635648892ba8cc6b0b532cb24f76a4d2a7a5d8a","modified":1460560674000},{"_id":"themes/yelee/languages/default.yml","hash":"2253fb0d03c963384b3f525fe151b79ba03809b7","modified":1459795231000},{"_id":"themes/yelee/languages/en.yml","hash":"d94c285d0cf7e637ea9aff79da9859919f068b79","modified":1459795231000},{"_id":"themes/yelee/languages/zh-Hant-HK.yml","hash":"0c9645ba8c59a6e66837dacaddee0433e096832d","modified":1459795231000},{"_id":"themes/yelee/languages/zh-Hans.yml","hash":"ba77fd1aa6708f22eb710a4dfaa0e76b722311e7","modified":1459795231000},{"_id":"themes/yelee/languages/zh-Hant-TW.yml","hash":"5165fac060a84319a72f1633b66bfc0073cdbf81","modified":1459795231000},{"_id":"themes/yelee/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1459795231000},{"_id":"themes/yelee/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1459795231000},{"_id":"themes/yelee/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1459795231000},{"_id":"themes/yelee/layout/layout.ejs","hash":"3a4350f23a1286345f76c949466c97a7200dae8e","modified":1459795231000},{"_id":"themes/yelee/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1459795231000},{"_id":"themes/yelee/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1459795231000},{"_id":"themes/yelee/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1459795231000},{"_id":"themes/yelee/source/apple-touch-icon.png","hash":"c0fda117fa166d63b9eb690cc5e4fb2caaf493b3","modified":1459795231000},{"_id":"themes/yelee/layout/_partial/after-footer.ejs","hash":"0305b1b4fdd817020b415374e8b28936b55cce31","modified":1459795231000},{"_id":"themes/yelee/layout/_partial/archive-post.ejs","hash":"0ecc2ad07b4abad80f564ac1858c50bcbdff34f8","modified":1459795231000},{"_id":"themes/yelee/layout/_partial/archive.ejs","hash":"a4eacc2bc1278095a0ef99f904b0634c78f980eb","modified":1459795231000},{"_id":"themes/yelee/layout/_partial/article.ejs","hash":"29749e14db1a5f1ab5e82f486ac0c7f8417c86c0","modified":1459795231000},{"_id":"themes/yelee/layout/_partial/background.ejs","hash":"aeef39abef66ee0bd6c9efe856eaeb1b81416d41","modified":1459795231000},{"_id":"themes/yelee/layout/_partial/footer.ejs","hash":"4cc5ed767999230dc337ba790e73e4e2c45104b5","modified":1459795231000},{"_id":"themes/yelee/layout/_partial/google-analytics.ejs","hash":"1ccc627d7697e68fddc367c73ac09920457e5b35","modified":1459795231000},{"_id":"themes/yelee/layout/_partial/head.ejs","hash":"3d0441aa3ec7f143955b17e1f8b81c33dc0f4ee5","modified":1459795231000},{"_id":"themes/yelee/layout/_partial/header.ejs","hash":"b69855e07b65117769adc515cb64b803932068c9","modified":1459795231000},{"_id":"themes/yelee/layout/_partial/left-col.ejs","hash":"929416483de539cc0c94410d923258838b4c508b","modified":1459795231000},{"_id":"themes/yelee/layout/_partial/mathjax.ejs","hash":"e045f237b2434592be4d9a64ffab298bcf023be7","modified":1459795231000},{"_id":"themes/yelee/layout/_partial/mobile-nav.ejs","hash":"8e14f5a3fb03d93ee2e5dcb0c26903f365518be1","modified":1459795231000},{"_id":"themes/yelee/layout/_partial/page.ejs","hash":"e9bb15f7b3e3d7fbbbcac8df462584141f97bcd7","modified":1459795231000},{"_id":"themes/yelee/layout/_partial/post-nav-button.ejs","hash":"0a98bffdd14f6677721841c0ac4487a86c77266c","modified":1459795231000},{"_id":"themes/yelee/layout/_partial/scrolling-button.ejs","hash":"bfc245d99cca8e325f7c34b985a769ff780f28a6","modified":1459795231000},{"_id":"themes/yelee/layout/_partial/toc.ejs","hash":"de8774db289e973d71898b660e11a8f94a2674bd","modified":1459795231000},{"_id":"themes/yelee/source/background/bg-1.jpg","hash":"31d7bb15211000c05656899302f8ec9ee3de0e9f","modified":1459795231000},{"_id":"themes/yelee/source/background/bg-2.jpg","hash":"d1e0b92e8fa822e44d185b5e1bf94ab47bc98a0a","modified":1459795231000},{"_id":"themes/yelee/source/background/bg-3.jpg","hash":"7ae358f3ab8b41558444053400e796c41b3ba0e2","modified":1459795231000},{"_id":"themes/yelee/source/background/bg-5.jpg","hash":"d476909f06fe8267c676952e3582bf9e9ff73585","modified":1459795231000},{"_id":"themes/yelee/source/background/bg-4.jpg","hash":"9a5241de4c880f13a278f6980bf11d4dfb214d82","modified":1459795231000},{"_id":"themes/yelee/source/background/bg-6.jpg","hash":"6df1383d0f6134016d844df9abb740a6e0c0b2c5","modified":1459795231000},{"_id":"themes/yelee/source/background/bg-7.jpg","hash":"1a06d3a660bfb99b62d760e4e1e09de168a4c74c","modified":1459795231000},{"_id":"themes/yelee/source/background/bg-8.jpg","hash":"8e80d0b7786c3bf7b9648c0190719e78001e9eeb","modified":1459795231000},{"_id":"themes/yelee/source/css/_extend.styl","hash":"8ab1ad313bd6707d248c5ca1ee9a5eab8d815e42","modified":1459795231000},{"_id":"themes/yelee/source/css/_variables.styl","hash":"b98824e8f9bd12998c2aefb232f85d3f87508c64","modified":1459795231000},{"_id":"themes/yelee/source/css/style.styl","hash":"3ebecf5499dd605e8371e976ce0a80a5b3e7cc64","modified":1459795231000},{"_id":"themes/yelee/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1459795231000},{"_id":"themes/yelee/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1459795231000},{"_id":"themes/yelee/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1459795231000},{"_id":"themes/yelee/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1459795231000},{"_id":"themes/yelee/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1459795231000},{"_id":"themes/yelee/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1459795231000},{"_id":"themes/yelee/source/fancybox/jquery.fancybox.css","hash":"96138eaddfbd305160ddcb98a5f08555ca6cb4ee","modified":1459795231000},{"_id":"themes/yelee/source/fancybox/jquery.fancybox.pack.js","hash":"2da892a02778236b64076e5e8802ef0566e1d9e8","modified":1459795231000},{"_id":"themes/yelee/source/fancybox/jquery.fancybox.js","hash":"004bb0812414554ab48067792f09e978603253b6","modified":1459795231000},{"_id":"themes/yelee/source/js/GithubRepoWidget.js","hash":"624e81a3b0e57495b0c0e0b3e056296c6e8ae5df","modified":1459795231000},{"_id":"themes/yelee/source/js/clipboard.min.js","hash":"c13b4bb8fee46447284590d2afc0efca0ea3cb7b","modified":1459795231000},{"_id":"themes/yelee/source/js/instagram.js","hash":"81e13cacf4947118ed1920e59b04ccf6beef6b86","modified":1459795231000},{"_id":"themes/yelee/source/js/jquery.lazyload.js","hash":"91d5acc31d0bcbdf4782166a66344e58fff28d89","modified":1459795231000},{"_id":"themes/yelee/source/js/mobile.js","hash":"230339073c37202d953b2895856551d8ccb1b19a","modified":1459795231000},{"_id":"themes/yelee/source/js/pc.js","hash":"c648ad0049c06395e42510b4f8559de7ae53ff53","modified":1459795231000},{"_id":"themes/yelee/source/js/main.js","hash":"17523848ae931fafd6ebbc0ae64db6dcad966aa8","modified":1459795231000},{"_id":"themes/yelee/source/img/GitHub.png","hash":"08c955a91b6733bd51913b54c69fe742d546d0ec","modified":1459795231000},{"_id":"themes/yelee/source/img/SegmentFault.png","hash":"52bd4ddf6df129b6958398b21fa370f17cadb428","modified":1459795231000},{"_id":"themes/yelee/source/img/V2EX.png","hash":"9adab6af95db9318e980c01cadbc5de800b4c816","modified":1459795231000},{"_id":"themes/yelee/source/img/avatar.png","hash":"9cfcc4c53646d2391fdf47e9fa558d46e336ef33","modified":1428569338000},{"_id":"themes/yelee/source/img/TiddlyWiki.png","hash":"58be3c981c6d25b47ddaab2f254838f9baa01d59","modified":1459795231000},{"_id":"themes/yelee/source/img/img-err.png","hash":"23a63ea26eb3c1d5e677d9883cf36cc1a1a1228b","modified":1459795231000},{"_id":"themes/yelee/source/img/img-loading.png","hash":"a9cd5cd11866824f31e3d1c5e23badfeb3f73031","modified":1459795231000},{"_id":"themes/yelee/source/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1459795231000},{"_id":"themes/yelee/source/img/新浪微博.png","hash":"c9fb558158f491104fd8dbafc92c30591ad0299e","modified":1459795231000},{"_id":"themes/yelee/source/img/知乎.png","hash":"50e43bad8fefb3950b13dc86aaa86de8a79432ae","modified":1459795231000},{"_id":"themes/yelee/source/img/简书.png","hash":"bfe5e7b6146de19d180f36fa5a2b074c2bc23406","modified":1459795231000},{"_id":"themes/yelee/source/img/网易云音乐.png","hash":"8bc2a2e2c4312ee9d4879b24f9e2bd51e6436840","modified":1459795231000},{"_id":"themes/yelee/source/img/虾米音乐.png","hash":"d3ff836d5d58e10fb30fac1bae0aae34cfe2038f","modified":1459795231000},{"_id":"themes/yelee/source/img/豆瓣.png","hash":"1dcf001b281d67d1b5d2a5d6c9a573b3a7cd0286","modified":1460803991000},{"_id":"themes/yelee/source/background/bg-10.jpg","hash":"51b427f07ffc6f2ad97651f23cc16e8f19ed02f9","modified":1459795231000},{"_id":"themes/yelee/source/background/bg-9.jpg","hash":"e4a3631b6b0f94ebce30a6f01ecb2b6ed7cfdb0b","modified":1459795231000},{"_id":"themes/yelee/layout/_partial/comments/disqus.ejs","hash":"2e5cad68bc59190b4158f4ab1879a222ca49a0d2","modified":1459795231000},{"_id":"themes/yelee/layout/_partial/comments/youyan.ejs","hash":"a6853b59ee60e775de1ed90b242084f83774d195","modified":1459795231000},{"_id":"themes/yelee/layout/_partial/comments/duoshuo.ejs","hash":"1f9ac8182fe0b867a8f1988888336c40c25894cd","modified":1459795231000},{"_id":"themes/yelee/layout/_partial/post/category.ejs","hash":"08c8d98bc6a73d3f72a3b0b30521ff28e1b657a7","modified":1459795231000},{"_id":"themes/yelee/layout/_partial/post/share.ejs","hash":"a78514ef137fab50dbbc14d8a060515855422736","modified":1459795231000},{"_id":"themes/yelee/layout/_partial/post/date.ejs","hash":"a9fc6bac9e1b90c1c17c0d0ffd97f9b108072fbe","modified":1459795231000},{"_id":"themes/yelee/layout/_partial/post/nav.ejs","hash":"2a8d8198f6c8058bd0edc3d73c5df0833febf0f9","modified":1459795231000},{"_id":"themes/yelee/layout/_partial/post/title.ejs","hash":"d4a460a35e2112d0c7414fd5e19b3a16093f1caf","modified":1459795231000},{"_id":"themes/yelee/layout/_partial/post/tag.ejs","hash":"7d2693a1162bf26e4b1ae9b789e0b2a2637ddbd5","modified":1459795231000},{"_id":"themes/yelee/source/css/_partial/archive.styl","hash":"053c1684b6edaca7fa0c94a7f9fca637ccece2c2","modified":1459795231000},{"_id":"themes/yelee/source/css/_partial/article.styl","hash":"21c532f24a2e90af158310e38060cf0e9ae62de0","modified":1459795231000},{"_id":"themes/yelee/source/css/_partial/footer.styl","hash":"2277125ef35f96a1ba76a1b84fc570526826453d","modified":1459795231000},{"_id":"themes/yelee/source/css/_partial/header.styl","hash":"67e59feb18eee6026717cb440d86ab9551782628","modified":1459795231000},{"_id":"themes/yelee/source/css/_partial/highlight.styl","hash":"65eb6cfe027b6925761499645cae220f766dc856","modified":1459795231000},{"_id":"themes/yelee/source/css/_partial/instagram.styl","hash":"a093443add2f529396d6b6bdef1675bc3acf3958","modified":1459795231000},{"_id":"themes/yelee/source/css/_partial/mobile-slider.styl","hash":"bed93ab1487da7591883e0df5eefa4cd413434ed","modified":1459795231000},{"_id":"themes/yelee/source/css/_partial/main.styl","hash":"1c83ea97a944e50684aa86825c3e96694007bde1","modified":1459795231000},{"_id":"themes/yelee/source/css/_partial/mobile.styl","hash":"8148239181328426b56fb8ebb54c17fb1aaa889a","modified":1459795231000},{"_id":"themes/yelee/source/css/_partial/page.styl","hash":"ca3f871adf8fdb296e4394070605dded53d93cb2","modified":1459795231000},{"_id":"themes/yelee/source/css/_partial/share.styl","hash":"c7807dda98bbd91ad8172a896a55c3c974859423","modified":1459795231000},{"_id":"themes/yelee/source/css/_partial/scroll.styl","hash":"f32deb9192568a2ea789d77a23a08d07f4e57d59","modified":1459795231000},{"_id":"themes/yelee/source/css/_partial/tagcloud.styl","hash":"85540c10503e0fb250b307ca3966583ee70e63f3","modified":1459795231000},{"_id":"themes/yelee/source/css/_partial/wheelmenu.styl","hash":"9e57421eab562ea13d0ed2b2e1415eee79fa23d0","modified":1459795231000},{"_id":"themes/yelee/source/css/_util/grid.styl","hash":"1aa883ab432d9e4139c89dcbd40ae2bd1528d029","modified":1459795231000},{"_id":"themes/yelee/source/css/_util/mixin.styl","hash":"429bad87fc156eacf226c5e35b0eafc277f2504b","modified":1459795231000},{"_id":"themes/yelee/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1459795231000},{"_id":"themes/yelee/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"6394c48092085788a8c0ef72670b0652006231a1","modified":1459795231000},{"_id":"themes/yelee/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"4c9c395d705d22af7da06870d18f434e2a2eeaf9","modified":1459795231000},{"_id":"themes/yelee/source/fancybox/helpers/jquery.fancybox-media.js","hash":"e14c32cc6823b81b2f758512f13ed8eb9ef2b454","modified":1459795231000},{"_id":"themes/yelee/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"b88b589f5f1aa1b3d87cc7eef34c281ff749b1ae","modified":1459795231000},{"_id":"themes/yelee/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"83cdfea43632b613771691a11f56f99d85fb6dbd","modified":1459795231000},{"_id":"themes/yelee/source/font-awesome/css/font-awesome.css","hash":"b488600451227b445414796e9b8550e7c1bd6d29","modified":1459795231000},{"_id":"themes/yelee/source/font-awesome/css/font-awesome.min.css","hash":"12d6861075de8e293265ff6ff03b1f3adcb44c76","modified":1459795231000},{"_id":"themes/yelee/source/font-awesome/fonts/fontawesome-webfont.eot","hash":"986eed8dca049714e43eeebcb3932741a4bec76d","modified":1459795231000},{"_id":"themes/yelee/source/font-awesome/fonts/FontAwesome.otf","hash":"42c179eef588854b5ec151bcf6a3f58aa8b79b11","modified":1459795231000},{"_id":"themes/yelee/source/font-awesome/fonts/fontawesome-webfont.woff","hash":"4a313eb93b959cc4154c684b915b0a31ddb68d84","modified":1459795231000},{"_id":"themes/yelee/source/font-awesome/fonts/fontawesome-webfont.woff2","hash":"638c652d623280a58144f93e7b552c66d1667a11","modified":1459795231000},{"_id":"themes/yelee/source/css/_partial/customise/blockquote.styl","hash":"5d14ba8efac7a0f1ffd5bc8924fcfdb7294bc918","modified":1459795231000},{"_id":"themes/yelee/source/css/_partial/customise/color-scheme.styl","hash":"69a77b9f7b8e84df7ae1c78e76659a92739b79a9","modified":1459795231000},{"_id":"themes/yelee/source/css/_partial/customise/code-block.styl","hash":"4db1a992a06fd92b779f0afc9bb8bb3667bdb101","modified":1459795231000},{"_id":"themes/yelee/source/css/_partial/customise/inline-code.styl","hash":"aedbcd697c9fbaeeb93c068be3db771c41feba0d","modified":1459795231000},{"_id":"themes/yelee/source/css/_partial/customise/social-icon.styl","hash":"6473b4d008c38cd5ea6900612ccb9197366ce4c1","modified":1460813483000},{"_id":"themes/yelee/source/css/_partial/post/youyan.styl","hash":"ac2869e2e0fb3a1ee0df4b0c0a233a2b1923ea20","modified":1459795231000},{"_id":"themes/yelee/source/font-awesome/fonts/fontawesome-webfont.ttf","hash":"6484f1af6b485d5096b71b344e67f4164c33dd1f","modified":1459795231000},{"_id":"themes/yelee/source/font-awesome/fonts/fontawesome-webfont.svg","hash":"b06b5c8f67fd632cdc62a33b62ae4f74194131b3","modified":1459795231000},{"_id":"public/about/index.html","hash":"51fcd43aaa6ce4ea1ef6e1562a1fd2fda31c1274","modified":1485388116146},{"_id":"public/lofter/index.html","hash":"2334e244663ce48434fa04f050a5aecdf3f1766a","modified":1485388116159},{"_id":"public/archives/2016/index.html","hash":"1b71ee8dbb563e6c193b47b64162fae3beebba8b","modified":1485388116159},{"_id":"public/archives/2016/04/index.html","hash":"8081c91c4b5730156b38a95604a06bec8a3471b9","modified":1485388116160},{"_id":"public/archives/2016/07/index.html","hash":"5c5f47a5aa2acfd562cd9ac3a1469bf307983817","modified":1485388116160},{"_id":"public/archives/2017/index.html","hash":"80c782a7c9c14a2248a669cb0b5051ff2efd60c8","modified":1485388116160},{"_id":"public/archives/2017/01/index.html","hash":"0158566fcd6366faae869b428b498a4abd021c3f","modified":1485388116160},{"_id":"public/tags/CSS/index.html","hash":"27be06619dded289401808773b3b8d262cc78b44","modified":1485388116160},{"_id":"public/tags/git/index.html","hash":"4cc032eba2533f1a1ca4c96d0b684b7a16f3a25c","modified":1485388116160},{"_id":"public/tags/JavaScript/index.html","hash":"6e9671e905c156f469d10c704240cfe1d309736b","modified":1485388116160},{"_id":"public/tags/面试/index.html","hash":"5496976ae8bcc9a7e96527bf4441495daaf32290","modified":1485388116161},{"_id":"public/tags/前端/index.html","hash":"010e485490929f2691a49765ae6bb8939f7d0cb0","modified":1485388116161},{"_id":"public/tags/HTML/index.html","hash":"28872d80e7b3898471cbe3405ed37b1b5cc94b18","modified":1485388116161},{"_id":"public/tags/程序人生/index.html","hash":"f13f16c62b0647d1d1386a1c24b5fc298d928aa7","modified":1485388116161},{"_id":"public/tags/程序员/index.html","hash":"2503aec6cd7d0eb5d97cbb91aa1e08de9ace036e","modified":1485388116161},{"_id":"public/tags/Hexo/index.html","hash":"6d523ca5f422043fbc6e3f157d7f522ad9d49122","modified":1485388116161},{"_id":"public/404.html","hash":"ff85374f1669444adbfa854f0d8027edf0579265","modified":1485388116161},{"_id":"public/tags/index.html","hash":"86f4d15f5cf164a2f29dbfc121c36fcec885fd3d","modified":1485388116161},{"_id":"public/2017/01/26/几道前端面试题小记/index.html","hash":"b74048caa7751001f20ea54212683ea55d356c4d","modified":1485388116161},{"_id":"public/2017/01/26/新手程序员常犯的十个错误/index.html","hash":"21567df90f7fdd0b25666dd96983fa70b794fa82","modified":1485388116161},{"_id":"public/2016/07/23/CSS学习笔记/index.html","hash":"55fc8f372c8c0454b9c82b05698bbb4b9b0e967e","modified":1485388116161},{"_id":"public/2016/04/17/关于转岗的思考/index.html","hash":"af2742a5d3095d37c6d71e5ffd63e8c1d3275c14","modified":1485388116161},{"_id":"public/2016/04/14/Git学习总结/index.html","hash":"d21bf137efc6b98db5335c9c272121749f1462c3","modified":1485388116161},{"_id":"public/archives/index.html","hash":"64510061ea54db9c44a48b075b6fa30a2fe5fa80","modified":1485388116161},{"_id":"public/index.html","hash":"40eebf3dd132755fb6d6d8ea142c755eae6430c5","modified":1485388116162},{"_id":"public/tags/感悟/index.html","hash":"b544f5686186d1545181420215ac8e06419be16c","modified":1485388116171},{"_id":"public/tags/职场/index.html","hash":"f3561a30c2e49b71e8833d839e8f9a9d1ac6bc31","modified":1485388116171},{"_id":"public/tags/工作/index.html","hash":"da2fecc853efdac25a5747f9a96bbf3837a19db1","modified":1485388116171},{"_id":"public/tags/思考/index.html","hash":"8974cb6e4a5819dd93d4568dca38d0eeebb361ba","modified":1485388116172},{"_id":"public/favicon.ico","hash":"4ce6656929cf52c6da16a791b98e624bd26ad433","modified":1485388116179},{"_id":"public/apple-touch-icon.png","hash":"c0fda117fa166d63b9eb690cc5e4fb2caaf493b3","modified":1485388116179},{"_id":"public/background/bg-1.jpg","hash":"31d7bb15211000c05656899302f8ec9ee3de0e9f","modified":1485388116179},{"_id":"public/background/bg-2.jpg","hash":"d1e0b92e8fa822e44d185b5e1bf94ab47bc98a0a","modified":1485388116179},{"_id":"public/background/bg-5.jpg","hash":"d476909f06fe8267c676952e3582bf9e9ff73585","modified":1485388116179},{"_id":"public/background/bg-3.jpg","hash":"7ae358f3ab8b41558444053400e796c41b3ba0e2","modified":1485388116179},{"_id":"public/background/bg-4.jpg","hash":"9a5241de4c880f13a278f6980bf11d4dfb214d82","modified":1485388116179},{"_id":"public/background/bg-6.jpg","hash":"6df1383d0f6134016d844df9abb740a6e0c0b2c5","modified":1485388116179},{"_id":"public/background/bg-7.jpg","hash":"1a06d3a660bfb99b62d760e4e1e09de168a4c74c","modified":1485388116179},{"_id":"public/background/bg-8.jpg","hash":"8e80d0b7786c3bf7b9648c0190719e78001e9eeb","modified":1485388116179},{"_id":"public/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1485388116179},{"_id":"public/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1485388116179},{"_id":"public/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1485388116180},{"_id":"public/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1485388116180},{"_id":"public/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1485388116180},{"_id":"public/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1485388116180},{"_id":"public/img/GitHub.png","hash":"08c955a91b6733bd51913b54c69fe742d546d0ec","modified":1485388116180},{"_id":"public/img/SegmentFault.png","hash":"52bd4ddf6df129b6958398b21fa370f17cadb428","modified":1485388116180},{"_id":"public/img/V2EX.png","hash":"9adab6af95db9318e980c01cadbc5de800b4c816","modified":1485388116180},{"_id":"public/img/avatar.png","hash":"9cfcc4c53646d2391fdf47e9fa558d46e336ef33","modified":1485388116180},{"_id":"public/img/TiddlyWiki.png","hash":"58be3c981c6d25b47ddaab2f254838f9baa01d59","modified":1485388116180},{"_id":"public/img/img-err.png","hash":"23a63ea26eb3c1d5e677d9883cf36cc1a1a1228b","modified":1485388116180},{"_id":"public/img/img-loading.png","hash":"a9cd5cd11866824f31e3d1c5e23badfeb3f73031","modified":1485388116180},{"_id":"public/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1485388116180},{"_id":"public/img/新浪微博.png","hash":"c9fb558158f491104fd8dbafc92c30591ad0299e","modified":1485388116180},{"_id":"public/img/知乎.png","hash":"50e43bad8fefb3950b13dc86aaa86de8a79432ae","modified":1485388116180},{"_id":"public/img/简书.png","hash":"bfe5e7b6146de19d180f36fa5a2b074c2bc23406","modified":1485388116180},{"_id":"public/img/网易云音乐.png","hash":"8bc2a2e2c4312ee9d4879b24f9e2bd51e6436840","modified":1485388116180},{"_id":"public/img/虾米音乐.png","hash":"d3ff836d5d58e10fb30fac1bae0aae34cfe2038f","modified":1485388116181},{"_id":"public/img/豆瓣.png","hash":"1dcf001b281d67d1b5d2a5d6c9a573b3a7cd0286","modified":1485388116181},{"_id":"public/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1485388116181},{"_id":"public/background/bg-10.jpg","hash":"51b427f07ffc6f2ad97651f23cc16e8f19ed02f9","modified":1485388117104},{"_id":"public/background/bg-9.jpg","hash":"e4a3631b6b0f94ebce30a6f01ecb2b6ed7cfdb0b","modified":1485388117106},{"_id":"public/font-awesome/fonts/fontawesome-webfont.eot","hash":"986eed8dca049714e43eeebcb3932741a4bec76d","modified":1485388117108},{"_id":"public/font-awesome/fonts/FontAwesome.otf","hash":"42c179eef588854b5ec151bcf6a3f58aa8b79b11","modified":1485388117108},{"_id":"public/font-awesome/fonts/fontawesome-webfont.woff","hash":"4a313eb93b959cc4154c684b915b0a31ddb68d84","modified":1485388117108},{"_id":"public/font-awesome/fonts/fontawesome-webfont.woff2","hash":"638c652d623280a58144f93e7b552c66d1667a11","modified":1485388117108},{"_id":"public/fancybox/jquery.fancybox.css","hash":"b6aa6692c2e5f8bd74d96827b78570f0c5683c20","modified":1485388117112},{"_id":"public/js/GithubRepoWidget.js","hash":"624e81a3b0e57495b0c0e0b3e056296c6e8ae5df","modified":1485388117112},{"_id":"public/js/clipboard.min.js","hash":"c13b4bb8fee46447284590d2afc0efca0ea3cb7b","modified":1485388117112},{"_id":"public/js/instagram.js","hash":"f19adbcc0dac33536bc6660598059048ec901882","modified":1485388117112},{"_id":"public/js/jquery.lazyload.js","hash":"8e4ad3e17f8e82be311b6b6e87811762e2b2d764","modified":1485388117112},{"_id":"public/js/mobile.js","hash":"f04858f253770a65172423cda0e583782bbb1feb","modified":1485388117112},{"_id":"public/js/pc.js","hash":"2ddef1d17c7372cfc5f6bdf67dc5efc27afd253c","modified":1485388117113},{"_id":"public/js/main.js","hash":"cc3a85baf1d6792e3801bcaa0077c455eb67818c","modified":1485388117113},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1485388117113},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1485388117113},{"_id":"public/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1485388117113},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1485388117113},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1485388117113},{"_id":"public/css/style.css","hash":"aa055dc223948327e9c4df892cae7a658dd53974","modified":1485388117113},{"_id":"public/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1485388117113},{"_id":"public/fancybox/jquery.fancybox.js","hash":"a82597493d75ea989ca586e09173cff332efe41e","modified":1485388117113},{"_id":"public/font-awesome/css/font-awesome.css","hash":"b488600451227b445414796e9b8550e7c1bd6d29","modified":1485388117113},{"_id":"public/font-awesome/css/font-awesome.min.css","hash":"12d6861075de8e293265ff6ff03b1f3adcb44c76","modified":1485388117113},{"_id":"public/font-awesome/fonts/fontawesome-webfont.ttf","hash":"6484f1af6b485d5096b71b344e67f4164c33dd1f","modified":1485388117113},{"_id":"public/font-awesome/fonts/fontawesome-webfont.svg","hash":"b06b5c8f67fd632cdc62a33b62ae4f74194131b3","modified":1485388117116}],"Category":[],"Data":[],"Page":[{"title":"404 Not Found：该页无法显示","toc":false,"comments":0,"_content":"<style type=\"text/css\">\n\t.article-header {\n\t\tpadding: 0;\n\t\tpadding-top: 26px;\n\t\tborder-left: none;\n\t\ttext-align: center;\n\t}\n\t.article-header:hover {\n\t\tborder-left: none;\n\t}\n\t.article-title {\n\t\tfont-size: 2.1em;\n\t}\n\tstrong a {\n\t\tcolor: #747474;\n\t}\n\t.article-meta {\n\t\tdisplay: none;\n\t}\n\t.share {\n\t\tdisplay: none;\n\t}\n\t.ds-meta {\n\t\tdisplay: none;\n\t}\n\t.player {\n\t\tmargin-left: -10px;\n\t}\n\t.sign {\n\t\ttext-align: right;\n\t\tfont-style: italic;\n\t}\n  \t#page-visit {\n\t\tdisplay: none;\n\t}\n\t.center {\n\t\ttext-align: center;\n\t\theight: 2.5em;\n\t\tfont-weight: bold;\n\t}\n\t.article-entry hr {\n\t\tmargin: 0;\n\t}\n\t.pic {\n\t\ttext-align: center;\n\t\tmargin: 0;\n\t}\n\t.pic br {\n  \t\tdisplay: none;\n  \t}\n\t#container .article-info-post.article-info {\n  \tdisplay: none;\n  \t}\n\t#container .article .article-title {\n\tpadding: 0;\n\t}\n</style>","source":"404/index.md","raw":"title: 404 Not Found：该页无法显示\ntoc: false\ncomments: false\npermalink: /404\n---\n<style type=\"text/css\">\n\t.article-header {\n\t\tpadding: 0;\n\t\tpadding-top: 26px;\n\t\tborder-left: none;\n\t\ttext-align: center;\n\t}\n\t.article-header:hover {\n\t\tborder-left: none;\n\t}\n\t.article-title {\n\t\tfont-size: 2.1em;\n\t}\n\tstrong a {\n\t\tcolor: #747474;\n\t}\n\t.article-meta {\n\t\tdisplay: none;\n\t}\n\t.share {\n\t\tdisplay: none;\n\t}\n\t.ds-meta {\n\t\tdisplay: none;\n\t}\n\t.player {\n\t\tmargin-left: -10px;\n\t}\n\t.sign {\n\t\ttext-align: right;\n\t\tfont-style: italic;\n\t}\n  \t#page-visit {\n\t\tdisplay: none;\n\t}\n\t.center {\n\t\ttext-align: center;\n\t\theight: 2.5em;\n\t\tfont-weight: bold;\n\t}\n\t.article-entry hr {\n\t\tmargin: 0;\n\t}\n\t.pic {\n\t\ttext-align: center;\n\t\tmargin: 0;\n\t}\n\t.pic br {\n  \t\tdisplay: none;\n  \t}\n\t#container .article-info-post.article-info {\n  \tdisplay: none;\n  \t}\n\t#container .article .article-title {\n\tpadding: 0;\n\t}\n</style>","date":"2017-01-15T12:00:48.000Z","updated":"2016-04-13T15:24:22.000Z","path":"/404.html","layout":"page","_id":"ciydlqcw30001hkfycfy6rr6h","content":"<style type=\"text/css\">\n    .article-header {\n        padding: 0;\n        padding-top: 26px;\n        border-left: none;\n        text-align: center;\n    }\n    .article-header:hover {\n        border-left: none;\n    }\n    .article-title {\n        font-size: 2.1em;\n    }\n    strong a {\n        color: #747474;\n    }\n    .article-meta {\n        display: none;\n    }\n    .share {\n        display: none;\n    }\n    .ds-meta {\n        display: none;\n    }\n    .player {\n        margin-left: -10px;\n    }\n    .sign {\n        text-align: right;\n        font-style: italic;\n    }\n      #page-visit {\n        display: none;\n    }\n    .center {\n        text-align: center;\n        height: 2.5em;\n        font-weight: bold;\n    }\n    .article-entry hr {\n        margin: 0;\n    }\n    .pic {\n        text-align: center;\n        margin: 0;\n    }\n    .pic br {\n          display: none;\n      }\n    #container .article-info-post.article-info {\n      display: none;\n      }\n    #container .article .article-title {\n    padding: 0;\n    }\n</style>","excerpt":"","more":"<style type=\"text/css\">\n    .article-header {\n        padding: 0;\n        padding-top: 26px;\n        border-left: none;\n        text-align: center;\n    }\n    .article-header:hover {\n        border-left: none;\n    }\n    .article-title {\n        font-size: 2.1em;\n    }\n    strong a {\n        color: #747474;\n    }\n    .article-meta {\n        display: none;\n    }\n    .share {\n        display: none;\n    }\n    .ds-meta {\n        display: none;\n    }\n    .player {\n        margin-left: -10px;\n    }\n    .sign {\n        text-align: right;\n        font-style: italic;\n    }\n      #page-visit {\n        display: none;\n    }\n    .center {\n        text-align: center;\n        height: 2.5em;\n        font-weight: bold;\n    }\n    .article-entry hr {\n        margin: 0;\n    }\n    .pic {\n        text-align: center;\n        margin: 0;\n    }\n    .pic br {\n          display: none;\n      }\n    #container .article-info-post.article-info {\n      display: none;\n      }\n    #container .article .article-title {\n    padding: 0;\n    }\n</style>"},{"title":"about","date":"2016-04-13T15:26:56.000Z","_content":"","source":"about/index.md","raw":"---\ntitle: about\ndate: 2016-04-13 23:26:56\n---\n","updated":"2016-04-13T15:26:56.000Z","path":"about/index.html","comments":1,"layout":"page","_id":"ciydlqcw70003hkfyxgcm2djv","content":"","excerpt":"","more":""},{"title":"lofter","date":"2016-04-14T15:43:01.000Z","_content":"\n","source":"lofter/index.md","raw":"---\ntitle: lofter\ndate: 2016-04-14 23:43:01\n---\n\n","updated":"2016-04-14T15:44:37.000Z","path":"lofter/index.html","comments":1,"layout":"page","_id":"ciydlqcwe0006hkfyf2wuuu16","content":"","excerpt":"","more":""},{"title":"tags","date":"2016-04-13T15:17:54.000Z","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2016-04-13 23:17:54\n---\n","updated":"2016-04-13T15:17:54.000Z","path":"tags/index.html","comments":1,"layout":"page","_id":"ciydlqcwh0008hkfy069g0br3","content":"","excerpt":"","more":""}],"Post":[{"title":"CSS学习笔记","date":"2016-07-23T07:45:26.000Z","_content":"\n选择符种类和用法\nID和class区别\n1、ID可用于页面内导航链接中\n2、ID在页面中唯一地标识一个元素，通常会在页面内的每个顶级区域都添加一个ID，从而得到非常明确的上下文，\n以便编写CSS时只选择嵌套在相应区域内的标签\n3、类的目的是为了标识具有相同特征的元素\n属性名选择符\n属性值选择符\n基于属性名和属性的选择符为我们提供了另外一种对待相同标签的机会。\n\n伪类分为：UI伪类和结构化伪类，UI伪类会在HTML元素处于某个状态时，为该元素应用CSS样式\n结构化伪类会在标记中存在某种结构上的关系时，为相应元素应用CSS元素。\n\nLVHA：list/visited/hover/ation\n\n浏览器默认样式表\n用户样式表\n作者链接样式表\n作者嵌入样式\n作者行内样式\n\n样式生效的层叠规则\n1、找到应用给每个元素和属性的所有声明\n2、按照顺序和权重排序\n3、按特指度排序\n4、顺序决定权重\n\nCSS属性值主要有三大类：文本值、数字值、颜色值\n\n\n\n三、定位元素\n\n1、没有设定宽度的元素始终扩展到填满其父元素的宽度为止。添加水平边框、内边距和外边距，会导致内容宽度减少，\n减少量等于水平边框、内边距和外编剧的和\n2、为设定了宽度的盒子添加边框、内边距和外边距，会导致盒子扩展得更宽。实际上，盒子的width属性设定的只是盒子\n内容区的宽度，而非黑子要占据的水平宽度。\n\n浮动：当你浮动一个图片或者其它元素时，你是要求浏览器把它往上方推，直到它碰到父元素的内边界。而后面的段落不再\n认为浮动元素在文档六中位于它的前面了，因而它会占据父元素左上角的位置。不过它的内容会绕开浮动的图片。  \n\n\n清除浮动：\n1、为父元素添加overflow：hidden\n2、同时浮动父元素，由于会收缩包裹住它的子元素，所以需要设置宽度为100%\n3、添加（无意义的）非浮动的子元素，仅用于清除浮动\n\n定位：static、relative、absolute、fixed\n相对定位相对的是原来在文档流中的位置（或者默认位置），原位置留空保持不变。\n绝对定位会彻底将元素从文档流中拿出来，定位的参照物为position设定为relative的祖先元素(或者默认上下文定位元素，如body)。\n固定定位元素的定位上下文是视口，不会随着页面滚动而移动。\n\n\ndisplay（是否展示出来）和visibility（可见性）的区别：当visibility设置为hidden时，元素会应隐藏，但他占据的空间\n仍然虚位以待。\n\n多张图片在背景中叠加起来，CSS规则中先列出的图片在上层   \n\n字体属性和文本属性\n\n子元素继承的是根据父元素宽度计算得到的缩进值。\n\n文本装饰：underline、overline、line-through、blink、none\n文本对齐：left、right、center、justify\n行高：通常与字体大小一起设定，如 1.2em/1.4，为字体大小的倍数\n垂直对其：vretical-align：sub/super/top/middle/bottom\n\n\n\n多栏布局的三种基本实现方案：固定宽度、流动、弹性\n\n\n\n","source":"_posts/CSS学习笔记.md","raw":"---\ntitle: CSS学习笔记\ntags:\n  - CSS\ndate: 2016-07-23 15:45:26\n---\n\n选择符种类和用法\nID和class区别\n1、ID可用于页面内导航链接中\n2、ID在页面中唯一地标识一个元素，通常会在页面内的每个顶级区域都添加一个ID，从而得到非常明确的上下文，\n以便编写CSS时只选择嵌套在相应区域内的标签\n3、类的目的是为了标识具有相同特征的元素\n属性名选择符\n属性值选择符\n基于属性名和属性的选择符为我们提供了另外一种对待相同标签的机会。\n\n伪类分为：UI伪类和结构化伪类，UI伪类会在HTML元素处于某个状态时，为该元素应用CSS样式\n结构化伪类会在标记中存在某种结构上的关系时，为相应元素应用CSS元素。\n\nLVHA：list/visited/hover/ation\n\n浏览器默认样式表\n用户样式表\n作者链接样式表\n作者嵌入样式\n作者行内样式\n\n样式生效的层叠规则\n1、找到应用给每个元素和属性的所有声明\n2、按照顺序和权重排序\n3、按特指度排序\n4、顺序决定权重\n\nCSS属性值主要有三大类：文本值、数字值、颜色值\n\n\n\n三、定位元素\n\n1、没有设定宽度的元素始终扩展到填满其父元素的宽度为止。添加水平边框、内边距和外边距，会导致内容宽度减少，\n减少量等于水平边框、内边距和外编剧的和\n2、为设定了宽度的盒子添加边框、内边距和外边距，会导致盒子扩展得更宽。实际上，盒子的width属性设定的只是盒子\n内容区的宽度，而非黑子要占据的水平宽度。\n\n浮动：当你浮动一个图片或者其它元素时，你是要求浏览器把它往上方推，直到它碰到父元素的内边界。而后面的段落不再\n认为浮动元素在文档六中位于它的前面了，因而它会占据父元素左上角的位置。不过它的内容会绕开浮动的图片。  \n\n\n清除浮动：\n1、为父元素添加overflow：hidden\n2、同时浮动父元素，由于会收缩包裹住它的子元素，所以需要设置宽度为100%\n3、添加（无意义的）非浮动的子元素，仅用于清除浮动\n\n定位：static、relative、absolute、fixed\n相对定位相对的是原来在文档流中的位置（或者默认位置），原位置留空保持不变。\n绝对定位会彻底将元素从文档流中拿出来，定位的参照物为position设定为relative的祖先元素(或者默认上下文定位元素，如body)。\n固定定位元素的定位上下文是视口，不会随着页面滚动而移动。\n\n\ndisplay（是否展示出来）和visibility（可见性）的区别：当visibility设置为hidden时，元素会应隐藏，但他占据的空间\n仍然虚位以待。\n\n多张图片在背景中叠加起来，CSS规则中先列出的图片在上层   \n\n字体属性和文本属性\n\n子元素继承的是根据父元素宽度计算得到的缩进值。\n\n文本装饰：underline、overline、line-through、blink、none\n文本对齐：left、right、center、justify\n行高：通常与字体大小一起设定，如 1.2em/1.4，为字体大小的倍数\n垂直对其：vretical-align：sub/super/top/middle/bottom\n\n\n\n多栏布局的三种基本实现方案：固定宽度、流动、弹性\n\n\n\n","slug":"CSS学习笔记","published":1,"updated":"2017-01-25T23:47:07.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciydlqcvz0000hkfyjz1lfljw","content":"<p>选择符种类和用法<br>ID和class区别<br>1、ID可用于页面内导航链接中<br>2、ID在页面中唯一地标识一个元素，通常会在页面内的每个顶级区域都添加一个ID，从而得到非常明确的上下文，<br>以便编写CSS时只选择嵌套在相应区域内的标签<br>3、类的目的是为了标识具有相同特征的元素<br>属性名选择符<br>属性值选择符<br>基于属性名和属性的选择符为我们提供了另外一种对待相同标签的机会。</p>\n<p>伪类分为：UI伪类和结构化伪类，UI伪类会在HTML元素处于某个状态时，为该元素应用CSS样式<br>结构化伪类会在标记中存在某种结构上的关系时，为相应元素应用CSS元素。</p>\n<p>LVHA：list/visited/hover/ation</p>\n<p>浏览器默认样式表<br>用户样式表<br>作者链接样式表<br>作者嵌入样式<br>作者行内样式</p>\n<p>样式生效的层叠规则<br>1、找到应用给每个元素和属性的所有声明<br>2、按照顺序和权重排序<br>3、按特指度排序<br>4、顺序决定权重</p>\n<p>CSS属性值主要有三大类：文本值、数字值、颜色值</p>\n<p>三、定位元素</p>\n<p>1、没有设定宽度的元素始终扩展到填满其父元素的宽度为止。添加水平边框、内边距和外边距，会导致内容宽度减少，<br>减少量等于水平边框、内边距和外编剧的和<br>2、为设定了宽度的盒子添加边框、内边距和外边距，会导致盒子扩展得更宽。实际上，盒子的width属性设定的只是盒子<br>内容区的宽度，而非黑子要占据的水平宽度。</p>\n<p>浮动：当你浮动一个图片或者其它元素时，你是要求浏览器把它往上方推，直到它碰到父元素的内边界。而后面的段落不再<br>认为浮动元素在文档六中位于它的前面了，因而它会占据父元素左上角的位置。不过它的内容会绕开浮动的图片。  </p>\n<p>清除浮动：<br>1、为父元素添加overflow：hidden<br>2、同时浮动父元素，由于会收缩包裹住它的子元素，所以需要设置宽度为100%<br>3、添加（无意义的）非浮动的子元素，仅用于清除浮动</p>\n<p>定位：static、relative、absolute、fixed<br>相对定位相对的是原来在文档流中的位置（或者默认位置），原位置留空保持不变。<br>绝对定位会彻底将元素从文档流中拿出来，定位的参照物为position设定为relative的祖先元素(或者默认上下文定位元素，如body)。<br>固定定位元素的定位上下文是视口，不会随着页面滚动而移动。</p>\n<p>display（是否展示出来）和visibility（可见性）的区别：当visibility设置为hidden时，元素会应隐藏，但他占据的空间<br>仍然虚位以待。</p>\n<p>多张图片在背景中叠加起来，CSS规则中先列出的图片在上层   </p>\n<p>字体属性和文本属性</p>\n<p>子元素继承的是根据父元素宽度计算得到的缩进值。</p>\n<p>文本装饰：underline、overline、line-through、blink、none<br>文本对齐：left、right、center、justify<br>行高：通常与字体大小一起设定，如 1.2em/1.4，为字体大小的倍数<br>垂直对其：vretical-align：sub/super/top/middle/bottom</p>\n<p>多栏布局的三种基本实现方案：固定宽度、流动、弹性</p>\n","excerpt":"","more":"<p>选择符种类和用法<br>ID和class区别<br>1、ID可用于页面内导航链接中<br>2、ID在页面中唯一地标识一个元素，通常会在页面内的每个顶级区域都添加一个ID，从而得到非常明确的上下文，<br>以便编写CSS时只选择嵌套在相应区域内的标签<br>3、类的目的是为了标识具有相同特征的元素<br>属性名选择符<br>属性值选择符<br>基于属性名和属性的选择符为我们提供了另外一种对待相同标签的机会。</p>\n<p>伪类分为：UI伪类和结构化伪类，UI伪类会在HTML元素处于某个状态时，为该元素应用CSS样式<br>结构化伪类会在标记中存在某种结构上的关系时，为相应元素应用CSS元素。</p>\n<p>LVHA：list/visited/hover/ation</p>\n<p>浏览器默认样式表<br>用户样式表<br>作者链接样式表<br>作者嵌入样式<br>作者行内样式</p>\n<p>样式生效的层叠规则<br>1、找到应用给每个元素和属性的所有声明<br>2、按照顺序和权重排序<br>3、按特指度排序<br>4、顺序决定权重</p>\n<p>CSS属性值主要有三大类：文本值、数字值、颜色值</p>\n<p>三、定位元素</p>\n<p>1、没有设定宽度的元素始终扩展到填满其父元素的宽度为止。添加水平边框、内边距和外边距，会导致内容宽度减少，<br>减少量等于水平边框、内边距和外编剧的和<br>2、为设定了宽度的盒子添加边框、内边距和外边距，会导致盒子扩展得更宽。实际上，盒子的width属性设定的只是盒子<br>内容区的宽度，而非黑子要占据的水平宽度。</p>\n<p>浮动：当你浮动一个图片或者其它元素时，你是要求浏览器把它往上方推，直到它碰到父元素的内边界。而后面的段落不再<br>认为浮动元素在文档六中位于它的前面了，因而它会占据父元素左上角的位置。不过它的内容会绕开浮动的图片。  </p>\n<p>清除浮动：<br>1、为父元素添加overflow：hidden<br>2、同时浮动父元素，由于会收缩包裹住它的子元素，所以需要设置宽度为100%<br>3、添加（无意义的）非浮动的子元素，仅用于清除浮动</p>\n<p>定位：static、relative、absolute、fixed<br>相对定位相对的是原来在文档流中的位置（或者默认位置），原位置留空保持不变。<br>绝对定位会彻底将元素从文档流中拿出来，定位的参照物为position设定为relative的祖先元素(或者默认上下文定位元素，如body)。<br>固定定位元素的定位上下文是视口，不会随着页面滚动而移动。</p>\n<p>display（是否展示出来）和visibility（可见性）的区别：当visibility设置为hidden时，元素会应隐藏，但他占据的空间<br>仍然虚位以待。</p>\n<p>多张图片在背景中叠加起来，CSS规则中先列出的图片在上层   </p>\n<p>字体属性和文本属性</p>\n<p>子元素继承的是根据父元素宽度计算得到的缩进值。</p>\n<p>文本装饰：underline、overline、line-through、blink、none<br>文本对齐：left、right、center、justify<br>行高：通常与字体大小一起设定，如 1.2em/1.4，为字体大小的倍数<br>垂直对其：vretical-align：sub/super/top/middle/bottom</p>\n<p>多栏布局的三种基本实现方案：固定宽度、流动、弹性</p>\n"},{"title":"Git学习总结","date":"2016-04-13T16:12:59.000Z","_content":"\n之前其实有稍微学习一点git，不过很久没用导致忘了很多，这次重新捡起来。\n\n<!--more-->\n\n## 1.Git本地的创建和使用\n- 初始化仓库-`git    init`，项目目录下生成.git隐藏文件夹即为git仓库，其中项目目录即为工作区，版本库中分为暂存区 *stage* 和分支版本库。\n![Git仓库](http://www.liaoxuefeng.com/files/attachments/001384907702917346729e9afbf4127b6dfbae9207af016000/0)\n- `git add [filename]` 即指将该文件加入暂存区中，而 `git commit -m \"commit message\"`则表示将暂存区中的内容加入仓库中。\n- 版本控制  \n    - `git status`用于查看当前状态，若工作区无修改则会显示工作区为干净的。\n    - `git log`显示 commit 的记录，`git log --graph`可以看到分支合并图。\n    - `git diff [filename]`用户查看该文件修改前后的变化。\n    - `git reset --hard HEAD^`可用于回滚到上一版本。`git reflog`查看命令历史。\n    - `git checkout -- file`可以丢弃工作区的修改\n    - 命令`git reset HEAD file`可以把暂存区的修改撤销掉（unstage），重新放回工作区，再使用`git checkout -- file`丢弃工作的修改。\n- 命令`git rm`用于删除一个文件，若发现误删， `git checkout -- file`用版本库中版本替换工作区中的版本，无论工作区是修改还是删除，都可以一键还原。\n- `git branch -b <name>`创建并切换分支，b应指buid的意思。删除分支：`git branch -d <name>`,切换分支：`git checkout <name>`注意跟用版本库中的内容替换工作区的命令区分。\n- 分支合并。`git merge <name>`，若有冲突`git status`提示冲突文件，手动解决冲突后再次合并即可。\n- 修复bug时，我们会通过创建新的bug分支进行修复，然后合并，最后删除；\n当手头工作没有完成时，先把工作现场`git stash`一下，然后去修复bug，修复后，再`git stash pop`(`git stash apply`和`git stash drop`来删除)，回到工作现场。\n- 创建和删除分支速度非常快的原因是仅增加了一个新的分支指针。可使用下图进行理解。\n![理解分支](http://www.liaoxuefeng.com/files/attachments/001384908811773187a597e2d844eefb11f5cf5d56135ca000/0)\n\n## 2.Git远程仓库的使用\n- 使用`ssh-keygen -t rsa -C \"youremail@example.com\"`创建SSH公钥和密钥，id_rsa和id_rsa.pub两个文件在*C:\\Users\\fengmanlou\\.ssh*目录下。\n- 要关联一个远程库，使用命令`git remote add origin git@server-name:path/repo-name.git`，并会将当前的master分支与远程版本库的分支关联起来。若 *origin* 设置错误，使用`git remote remove origin`删除配置的远程版本库。\n- 关联后，使用命令`git push -u origin master`第一次推送master分支的所有内容；*origin* 即指此前设置好的远程版本库地址。\n- 每次本地提交后，只要有必要，就可以使用命令`git push origin master`推送最新修改；\n- 用git remote -v显示更详细的远程库信息\n- 团队合作的分支图如下：\n![实际工作](http://www.liaoxuefeng.com/files/attachments/001384909239390d355eb07d9d64305b6322aaf4edac1e3000/0)\n- 多人协作的工作模式\n    1.首先，可以试图用`git push origin branch-name`推送自己的修改；\n    2.如果推送失败，则因为远程分支比你的本地更新，需要先用git pull试图合并；\n    3.如果合并有冲突，则解决冲突，并在本地提交；\n    4.没有冲突或者解决掉冲突后，再用`git push origin branch-name`推送就能成功！\n- 在本地创建和远程分支对应的分支，使用`git checkout -b branch-name origin/branch-name`，本地和远程分支的名称最好一致；   \n- 建立本地分支和远程分支的关联，使用`git branch --set-upstream branch-name origin/branch-name`；\n\n\n","source":"_posts/Git学习总结.md","raw":"---\ntitle: Git学习总结\ndate: 2016-04-14 00:12:59\ntags: git \n---\n\n之前其实有稍微学习一点git，不过很久没用导致忘了很多，这次重新捡起来。\n\n<!--more-->\n\n## 1.Git本地的创建和使用\n- 初始化仓库-`git    init`，项目目录下生成.git隐藏文件夹即为git仓库，其中项目目录即为工作区，版本库中分为暂存区 *stage* 和分支版本库。\n![Git仓库](http://www.liaoxuefeng.com/files/attachments/001384907702917346729e9afbf4127b6dfbae9207af016000/0)\n- `git add [filename]` 即指将该文件加入暂存区中，而 `git commit -m \"commit message\"`则表示将暂存区中的内容加入仓库中。\n- 版本控制  \n    - `git status`用于查看当前状态，若工作区无修改则会显示工作区为干净的。\n    - `git log`显示 commit 的记录，`git log --graph`可以看到分支合并图。\n    - `git diff [filename]`用户查看该文件修改前后的变化。\n    - `git reset --hard HEAD^`可用于回滚到上一版本。`git reflog`查看命令历史。\n    - `git checkout -- file`可以丢弃工作区的修改\n    - 命令`git reset HEAD file`可以把暂存区的修改撤销掉（unstage），重新放回工作区，再使用`git checkout -- file`丢弃工作的修改。\n- 命令`git rm`用于删除一个文件，若发现误删， `git checkout -- file`用版本库中版本替换工作区中的版本，无论工作区是修改还是删除，都可以一键还原。\n- `git branch -b <name>`创建并切换分支，b应指buid的意思。删除分支：`git branch -d <name>`,切换分支：`git checkout <name>`注意跟用版本库中的内容替换工作区的命令区分。\n- 分支合并。`git merge <name>`，若有冲突`git status`提示冲突文件，手动解决冲突后再次合并即可。\n- 修复bug时，我们会通过创建新的bug分支进行修复，然后合并，最后删除；\n当手头工作没有完成时，先把工作现场`git stash`一下，然后去修复bug，修复后，再`git stash pop`(`git stash apply`和`git stash drop`来删除)，回到工作现场。\n- 创建和删除分支速度非常快的原因是仅增加了一个新的分支指针。可使用下图进行理解。\n![理解分支](http://www.liaoxuefeng.com/files/attachments/001384908811773187a597e2d844eefb11f5cf5d56135ca000/0)\n\n## 2.Git远程仓库的使用\n- 使用`ssh-keygen -t rsa -C \"youremail@example.com\"`创建SSH公钥和密钥，id_rsa和id_rsa.pub两个文件在*C:\\Users\\fengmanlou\\.ssh*目录下。\n- 要关联一个远程库，使用命令`git remote add origin git@server-name:path/repo-name.git`，并会将当前的master分支与远程版本库的分支关联起来。若 *origin* 设置错误，使用`git remote remove origin`删除配置的远程版本库。\n- 关联后，使用命令`git push -u origin master`第一次推送master分支的所有内容；*origin* 即指此前设置好的远程版本库地址。\n- 每次本地提交后，只要有必要，就可以使用命令`git push origin master`推送最新修改；\n- 用git remote -v显示更详细的远程库信息\n- 团队合作的分支图如下：\n![实际工作](http://www.liaoxuefeng.com/files/attachments/001384909239390d355eb07d9d64305b6322aaf4edac1e3000/0)\n- 多人协作的工作模式\n    1.首先，可以试图用`git push origin branch-name`推送自己的修改；\n    2.如果推送失败，则因为远程分支比你的本地更新，需要先用git pull试图合并；\n    3.如果合并有冲突，则解决冲突，并在本地提交；\n    4.没有冲突或者解决掉冲突后，再用`git push origin branch-name`推送就能成功！\n- 在本地创建和远程分支对应的分支，使用`git checkout -b branch-name origin/branch-name`，本地和远程分支的名称最好一致；   \n- 建立本地分支和远程分支的关联，使用`git branch --set-upstream branch-name origin/branch-name`；\n\n\n","slug":"Git学习总结","published":1,"updated":"2016-04-16T16:43:18.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciydlqcw50002hkfylrbvtwjq","content":"<p>之前其实有稍微学习一点git，不过很久没用导致忘了很多，这次重新捡起来。</p>\n<a id=\"more\"></a>\n<h2 id=\"1-Git本地的创建和使用\"><a href=\"#1-Git本地的创建和使用\" class=\"headerlink\" title=\"1.Git本地的创建和使用\"></a>1.Git本地的创建和使用</h2><ul>\n<li>初始化仓库-<code>git    init</code>，项目目录下生成.git隐藏文件夹即为git仓库，其中项目目录即为工作区，版本库中分为暂存区 <em>stage</em> 和分支版本库。<br><img src=\"http://www.liaoxuefeng.com/files/attachments/001384907702917346729e9afbf4127b6dfbae9207af016000/0\" alt=\"Git仓库\"></li>\n<li><code>git add [filename]</code> 即指将该文件加入暂存区中，而 <code>git commit -m &quot;commit message&quot;</code>则表示将暂存区中的内容加入仓库中。</li>\n<li>版本控制  <ul>\n<li><code>git status</code>用于查看当前状态，若工作区无修改则会显示工作区为干净的。</li>\n<li><code>git log</code>显示 commit 的记录，<code>git log --graph</code>可以看到分支合并图。</li>\n<li><code>git diff [filename]</code>用户查看该文件修改前后的变化。</li>\n<li><code>git reset --hard HEAD^</code>可用于回滚到上一版本。<code>git reflog</code>查看命令历史。</li>\n<li><code>git checkout -- file</code>可以丢弃工作区的修改</li>\n<li>命令<code>git reset HEAD file</code>可以把暂存区的修改撤销掉（unstage），重新放回工作区，再使用<code>git checkout -- file</code>丢弃工作的修改。</li>\n</ul>\n</li>\n<li>命令<code>git rm</code>用于删除一个文件，若发现误删， <code>git checkout -- file</code>用版本库中版本替换工作区中的版本，无论工作区是修改还是删除，都可以一键还原。</li>\n<li><code>git branch -b &lt;name&gt;</code>创建并切换分支，b应指buid的意思。删除分支：<code>git branch -d &lt;name&gt;</code>,切换分支：<code>git checkout &lt;name&gt;</code>注意跟用版本库中的内容替换工作区的命令区分。</li>\n<li>分支合并。<code>git merge &lt;name&gt;</code>，若有冲突<code>git status</code>提示冲突文件，手动解决冲突后再次合并即可。</li>\n<li>修复bug时，我们会通过创建新的bug分支进行修复，然后合并，最后删除；<br>当手头工作没有完成时，先把工作现场<code>git stash</code>一下，然后去修复bug，修复后，再<code>git stash pop</code>(<code>git stash apply</code>和<code>git stash drop</code>来删除)，回到工作现场。</li>\n<li>创建和删除分支速度非常快的原因是仅增加了一个新的分支指针。可使用下图进行理解。<br><img src=\"http://www.liaoxuefeng.com/files/attachments/001384908811773187a597e2d844eefb11f5cf5d56135ca000/0\" alt=\"理解分支\"></li>\n</ul>\n<h2 id=\"2-Git远程仓库的使用\"><a href=\"#2-Git远程仓库的使用\" class=\"headerlink\" title=\"2.Git远程仓库的使用\"></a>2.Git远程仓库的使用</h2><ul>\n<li>使用<code>ssh-keygen -t rsa -C &quot;youremail@example.com&quot;</code>创建SSH公钥和密钥，id_rsa和id_rsa.pub两个文件在<em>C:\\Users\\fengmanlou.ssh</em>目录下。</li>\n<li>要关联一个远程库，使用命令<code>git remote add origin git@server-name:path/repo-name.git</code>，并会将当前的master分支与远程版本库的分支关联起来。若 <em>origin</em> 设置错误，使用<code>git remote remove origin</code>删除配置的远程版本库。</li>\n<li>关联后，使用命令<code>git push -u origin master</code>第一次推送master分支的所有内容；<em>origin</em> 即指此前设置好的远程版本库地址。</li>\n<li>每次本地提交后，只要有必要，就可以使用命令<code>git push origin master</code>推送最新修改；</li>\n<li>用git remote -v显示更详细的远程库信息</li>\n<li>团队合作的分支图如下：<br><img src=\"http://www.liaoxuefeng.com/files/attachments/001384909239390d355eb07d9d64305b6322aaf4edac1e3000/0\" alt=\"实际工作\"></li>\n<li>多人协作的工作模式<br>  1.首先，可以试图用<code>git push origin branch-name</code>推送自己的修改；<br>  2.如果推送失败，则因为远程分支比你的本地更新，需要先用git pull试图合并；<br>  3.如果合并有冲突，则解决冲突，并在本地提交；<br>  4.没有冲突或者解决掉冲突后，再用<code>git push origin branch-name</code>推送就能成功！</li>\n<li>在本地创建和远程分支对应的分支，使用<code>git checkout -b branch-name origin/branch-name</code>，本地和远程分支的名称最好一致；   </li>\n<li>建立本地分支和远程分支的关联，使用<code>git branch --set-upstream branch-name origin/branch-name</code>；</li>\n</ul>\n","excerpt":"<p>之前其实有稍微学习一点git，不过很久没用导致忘了很多，这次重新捡起来。</p>","more":"<h2 id=\"1-Git本地的创建和使用\"><a href=\"#1-Git本地的创建和使用\" class=\"headerlink\" title=\"1.Git本地的创建和使用\"></a>1.Git本地的创建和使用</h2><ul>\n<li>初始化仓库-<code>git    init</code>，项目目录下生成.git隐藏文件夹即为git仓库，其中项目目录即为工作区，版本库中分为暂存区 <em>stage</em> 和分支版本库。<br><img src=\"http://www.liaoxuefeng.com/files/attachments/001384907702917346729e9afbf4127b6dfbae9207af016000/0\" alt=\"Git仓库\"></li>\n<li><code>git add [filename]</code> 即指将该文件加入暂存区中，而 <code>git commit -m &quot;commit message&quot;</code>则表示将暂存区中的内容加入仓库中。</li>\n<li>版本控制  <ul>\n<li><code>git status</code>用于查看当前状态，若工作区无修改则会显示工作区为干净的。</li>\n<li><code>git log</code>显示 commit 的记录，<code>git log --graph</code>可以看到分支合并图。</li>\n<li><code>git diff [filename]</code>用户查看该文件修改前后的变化。</li>\n<li><code>git reset --hard HEAD^</code>可用于回滚到上一版本。<code>git reflog</code>查看命令历史。</li>\n<li><code>git checkout -- file</code>可以丢弃工作区的修改</li>\n<li>命令<code>git reset HEAD file</code>可以把暂存区的修改撤销掉（unstage），重新放回工作区，再使用<code>git checkout -- file</code>丢弃工作的修改。</li>\n</ul>\n</li>\n<li>命令<code>git rm</code>用于删除一个文件，若发现误删， <code>git checkout -- file</code>用版本库中版本替换工作区中的版本，无论工作区是修改还是删除，都可以一键还原。</li>\n<li><code>git branch -b &lt;name&gt;</code>创建并切换分支，b应指buid的意思。删除分支：<code>git branch -d &lt;name&gt;</code>,切换分支：<code>git checkout &lt;name&gt;</code>注意跟用版本库中的内容替换工作区的命令区分。</li>\n<li>分支合并。<code>git merge &lt;name&gt;</code>，若有冲突<code>git status</code>提示冲突文件，手动解决冲突后再次合并即可。</li>\n<li>修复bug时，我们会通过创建新的bug分支进行修复，然后合并，最后删除；<br>当手头工作没有完成时，先把工作现场<code>git stash</code>一下，然后去修复bug，修复后，再<code>git stash pop</code>(<code>git stash apply</code>和<code>git stash drop</code>来删除)，回到工作现场。</li>\n<li>创建和删除分支速度非常快的原因是仅增加了一个新的分支指针。可使用下图进行理解。<br><img src=\"http://www.liaoxuefeng.com/files/attachments/001384908811773187a597e2d844eefb11f5cf5d56135ca000/0\" alt=\"理解分支\"></li>\n</ul>\n<h2 id=\"2-Git远程仓库的使用\"><a href=\"#2-Git远程仓库的使用\" class=\"headerlink\" title=\"2.Git远程仓库的使用\"></a>2.Git远程仓库的使用</h2><ul>\n<li>使用<code>ssh-keygen -t rsa -C &quot;youremail@example.com&quot;</code>创建SSH公钥和密钥，id_rsa和id_rsa.pub两个文件在<em>C:\\Users\\fengmanlou.ssh</em>目录下。</li>\n<li>要关联一个远程库，使用命令<code>git remote add origin git@server-name:path/repo-name.git</code>，并会将当前的master分支与远程版本库的分支关联起来。若 <em>origin</em> 设置错误，使用<code>git remote remove origin</code>删除配置的远程版本库。</li>\n<li>关联后，使用命令<code>git push -u origin master</code>第一次推送master分支的所有内容；<em>origin</em> 即指此前设置好的远程版本库地址。</li>\n<li>每次本地提交后，只要有必要，就可以使用命令<code>git push origin master</code>推送最新修改；</li>\n<li>用git remote -v显示更详细的远程库信息</li>\n<li>团队合作的分支图如下：<br><img src=\"http://www.liaoxuefeng.com/files/attachments/001384909239390d355eb07d9d64305b6322aaf4edac1e3000/0\" alt=\"实际工作\"></li>\n<li>多人协作的工作模式<br>  1.首先，可以试图用<code>git push origin branch-name</code>推送自己的修改；<br>  2.如果推送失败，则因为远程分支比你的本地更新，需要先用git pull试图合并；<br>  3.如果合并有冲突，则解决冲突，并在本地提交；<br>  4.没有冲突或者解决掉冲突后，再用<code>git push origin branch-name</code>推送就能成功！</li>\n<li>在本地创建和远程分支对应的分支，使用<code>git checkout -b branch-name origin/branch-name</code>，本地和远程分支的名称最好一致；   </li>\n<li>建立本地分支和远程分支的关联，使用<code>git branch --set-upstream branch-name origin/branch-name</code>；</li>\n</ul>"},{"title":"关于转岗的思考","date":"2016-04-16T16:46:33.000Z","author":"风满楼","_content":"\n在三月份的末尾总算是鼓起了勇气向老大提起了离职的事情，来猎豹也快一年了，工作也挺辛苦的，学到了蛮多关于公司和运营方面的知识。\n技术上基本没有太多的长进，每隔一段时间总会给自己打打鸡血，然后熬夜看书到2点钟，最后也没能坚持下来。\n一鼓作气，再而衰，三而竭，人生有时候需要一点勇气来改变当下的生活~\nenjoy~\n\n\n","source":"_posts/关于转岗的思考.md","raw":"---\ntitle: 关于转岗的思考\ntags:\n  - 感悟\n  - 工作\n  - 职场\n  - 思考\ndate: 2016-04-17 00:46:33\nauthor: 风满楼\n---\n\n在三月份的末尾总算是鼓起了勇气向老大提起了离职的事情，来猎豹也快一年了，工作也挺辛苦的，学到了蛮多关于公司和运营方面的知识。\n技术上基本没有太多的长进，每隔一段时间总会给自己打打鸡血，然后熬夜看书到2点钟，最后也没能坚持下来。\n一鼓作气，再而衰，三而竭，人生有时候需要一点勇气来改变当下的生活~\nenjoy~\n\n\n","slug":"关于转岗的思考","published":1,"updated":"2017-01-25T23:48:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciydlqcwb0005hkfybsmlct2v","content":"<p>在三月份的末尾总算是鼓起了勇气向老大提起了离职的事情，来猎豹也快一年了，工作也挺辛苦的，学到了蛮多关于公司和运营方面的知识。<br>技术上基本没有太多的长进，每隔一段时间总会给自己打打鸡血，然后熬夜看书到2点钟，最后也没能坚持下来。<br>一鼓作气，再而衰，三而竭，人生有时候需要一点勇气来改变当下的生活~<br>enjoy~</p>\n","excerpt":"","more":"<p>在三月份的末尾总算是鼓起了勇气向老大提起了离职的事情，来猎豹也快一年了，工作也挺辛苦的，学到了蛮多关于公司和运营方面的知识。<br>技术上基本没有太多的长进，每隔一段时间总会给自己打打鸡血，然后熬夜看书到2点钟，最后也没能坚持下来。<br>一鼓作气，再而衰，三而竭，人生有时候需要一点勇气来改变当下的生活~<br>enjoy~</p>\n"},{"title":"几道前端面试题小记","date":"2017-01-25T23:29:36.000Z","_content":"\n最近面试了不少家，苦于前端经验薄弱，被各种血虐。做了不少家面试题，把各种不会的回来再做一遍，作为经验总结吧。\n\n### 1.如何最优性能去重一个数组？\n\n方法有好多，比如新建一个数组，原数组的内容依次往里放，若该数组元素已存在，则跳过；又或者先排序，依次比较前后两个元素是否相等，若相等，则去掉删除后一个元素。面试官有提到使用 `filter` 的方法,但是当场没想到，发现这个方法其实属于相当不错的，这种函数式的思维在某些地方相当实用。\n```\nvar arr = [3,5,2,6,2,3,5,8,6]\n\nfunction distinct(arr) {\n    return arr.filter(function (elem,index,arr){\n        return arr.indexOf(elem,index+1) === -1;\n    });\n}\n\nconsole.log(distinct(arr));\n```\n\n**思路扩展**\n比如说存在一个数组，其中元素为对象，根据对象某个属性进行排序。例如将以下data数组按age正序排列，常规的办法可能是通过比较age大小，操作对象来进行排序，这样代码会比较复杂。而更优的方法则是通过 `sort` 方法。\n```\nvar data = [\n{name:'xiaoming',age:18},\n{name:'xiaohua',age:20},\n{name:'xiaoli',age:25},\n{name:'xiaozheng',age:16}];\n```\n\n查阅 [MDN](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/sort) 关于 `sort` 方法，此方法明显代码量更少，含义更加清晰。\n```\nfunction asc_order(data){\n    return data.sort(function (a,b){\n        return a.age- b.age;\n    })\n}\n```\n\n### 2.变量声明和函数声明提升\n\n```\nfunction fn(a){\n    console.log(a);\n    var a=2;\n    function a(){}\n    console.log(a);\n}\nfn(1);\n```\n以上代码输出内容？\n此前看书时有了解到变量声明会提升到作用域顶部，但忘记了变量赋值保持在原处，同时变量声明和函数声明的先后关系不确定，所以此题对我来说比较难，只能瞎蒙答案。\n\n```\nfunction  fn(a){\n    var a;\n    function a(){}\n    console.log(a);\n    a = 2;\n    console.log(a);\n}\n\nfn(1);\n```\n\n> 1. 所有全局变量都是window或Global的属性\n> 2. 函数声明会被提到范围作用域的顶端\n> 3. 变量声明被提到范围作用域的顶端\n> 4. 变量声明比函数声明优先级高，变量声明优于函数声明，如果两者同时存在，后被提升的函数声明会覆盖被提升的变量声明\n> 5. 变量赋值不会被提升，到执行行代码才开始赋值\n\n[参考博客地址](http://www.w3cplus.com/javascript/javascript-hoisting-in-details.html)，根据以上五点共识，可将代码翻译如上所示。\n\n**深入思考**\n为什么JavaScript相比较其它语言会存在声明提升？变量声明时编译器做了什么？变量赋值时编译器又做什么了？\n\n### 3.作用域和 `this`\n```\nvar a = 10;\nfunction test(){\n    a = 100;\n    console.log(a);\n    console.log(this.a);\n    var a;\n    console.log(a);\n}\ntest();\n```\n\n```\nvar a = 100;function test(){\n    console.log(a);\n    var a = 10;\n    console.log(a);\n}\ntest();\n```\n\n```\nvar a = 100;function test(){\n    console.log(a);\n    a = 10;\n    console.log(a);\n}\n\ntest();\nconsole.log(a);\n```\n\n在非严格环境下，以上三个代码分别输出什么？碰到这种题目我也是头晕眼花，稍有不慎就掉坑了。当然实际业务中不会出现这样的代码，但还是相当有必要以这样的代码来检查对 `JavaScript` 理解的程度。\n`this` 的用法参照阮一峰老师的[博客](http://javascript.ruanyifeng.com/oop/this.html)，主要分为三种情况,但总的原则是指向调用函数的那个对象。\n> * 全局环境:调用函数的对象实际为 `window` ，所以函数内的 `this` 指向 `window` ;\n> * 构造函数:通过构造函造函数生成了一个新对象，`this` 指向这个新对象。\n> * 对象的方法：函数作为对象的某个方法调用， `this` 就指向这个上级对象。\n\n故第一道题中属于全局环境， `this` 指向 `window` ，所以输出结果为：100，10，100；\n第二道题输出结果为：undefined，10；第三道题输出结果为：100，10，10；\n\n### 4.setTimeout 深入分析其机制 \n\n```\nfor (var i = 0;i<=3;i++){\n    setTimeout(function (){\n        console.log(i);\n    },0);\n}\n```\n此题输出内容是什么？\n\n`setTimeout` 为 `Window` 对象方法，用来注册在指定的事件之后单次或重复调用的函数。\n\n> setTimeout的作用是将代码推迟到指定时间执行，如果指定时间为0，即setTimeout(f,0)，那么会立刻执行吗？\n\n> 答案是不会。因为上一段说过，必须要等到当前脚本的同步任务和“任务队列”中已有的事件，全部处理完以后，才会执行setTimeout指定的任务。也就是说，setTimeout的真正作用是，在“消息队列”的现有消息的后面再添加一个消息，规定在指定时间执行某段代码。setTimeout添加的事件，会在下一次EventLoop执行。\n\n> setTimeout(f,0)将第二个参数设为0，作用是让f在现有的任务（脚本的同步任务和“消息队列”指定的任务）一结束就立刻执行。也就是说，setTimeout(f,0)的作用是，尽可能早地执行指定的任务。而并不是会立刻就执行这个任务。\n\n所以最终的结果是当前的函数执行结束之后，再去执行 `setTimeout` 定义的内容。\n\n### 5.class属性覆盖问题\n\n```\n<style>\n    .B {color:  red}\n    .A {color: blue}\n\n</style>\n\n<body>\n<p class=\"A B\">XXXXXXXXXX</p>\n</body>\n```\n最后实际的问题是什么颜色？\n存在多个类名时，类名的位置不会对属性的渲染产生影响。只有在style中定义的位置才会有影响，同一条属性，后面定义的会覆盖前面定义的属性。\n\n### 6.实现类似 jquery 的 `one` 方法\n\n即对一个元素绑定一个事件，操作一次后绑定事件失效。\n\nHTML部分：\n```\n<body>\n<p id=\"target\">XXXXXXXXXX</p>\n</body>\n```\n\nJS部分：\n```\nwindow.onload = function(){\n    var target = document.getElementById('target');\n    function fn(e){\n        alert('hello');\n        target.removeEventListener('click',fn);\n    };\n    target.addEventListener('click',fn);\n}\n\n```\n\n此代码虽可行，但没有进行封装，不便于使用。\n\n正统封装后的JS代码，使用 `arguments.callee` 表示当前 `function` ，同时需对 `event` 上的属性有所了解。\n```\nfunction oneTime(node,type,callback){\n    node.addEventListener(type,function (e){\n        e.target.removeEventListener(e.type,arguments.callee);\n        return callback(e);\n    });\n}\nfunction handle(e){\n    alert('hello!');\n}\noneTime(p,'click',handle);\n```\n\n学习前端一个月，上一周面试了大概10多家，收获的 `offer` 却是寥寥。\n为了效率，前端各方面的内容都有涉猎，深度却相当不足，面试时暴露各种问题。\n还是需深入思考，欲速则不达啊！\n\n大概是要加入大鱼或者小悟，以后工作好好努力吧！\n","source":"_posts/几道前端面试题小记.md","raw":"---\ntitle: 几道前端面试题小记\ntags:\n  - JavaScript\n  - 面试\n  - 前端\n  - CSS\n  - HTML\ndate: 2017-01-26 07:29:36\n---\n\n最近面试了不少家，苦于前端经验薄弱，被各种血虐。做了不少家面试题，把各种不会的回来再做一遍，作为经验总结吧。\n\n### 1.如何最优性能去重一个数组？\n\n方法有好多，比如新建一个数组，原数组的内容依次往里放，若该数组元素已存在，则跳过；又或者先排序，依次比较前后两个元素是否相等，若相等，则去掉删除后一个元素。面试官有提到使用 `filter` 的方法,但是当场没想到，发现这个方法其实属于相当不错的，这种函数式的思维在某些地方相当实用。\n```\nvar arr = [3,5,2,6,2,3,5,8,6]\n\nfunction distinct(arr) {\n    return arr.filter(function (elem,index,arr){\n        return arr.indexOf(elem,index+1) === -1;\n    });\n}\n\nconsole.log(distinct(arr));\n```\n\n**思路扩展**\n比如说存在一个数组，其中元素为对象，根据对象某个属性进行排序。例如将以下data数组按age正序排列，常规的办法可能是通过比较age大小，操作对象来进行排序，这样代码会比较复杂。而更优的方法则是通过 `sort` 方法。\n```\nvar data = [\n{name:'xiaoming',age:18},\n{name:'xiaohua',age:20},\n{name:'xiaoli',age:25},\n{name:'xiaozheng',age:16}];\n```\n\n查阅 [MDN](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/sort) 关于 `sort` 方法，此方法明显代码量更少，含义更加清晰。\n```\nfunction asc_order(data){\n    return data.sort(function (a,b){\n        return a.age- b.age;\n    })\n}\n```\n\n### 2.变量声明和函数声明提升\n\n```\nfunction fn(a){\n    console.log(a);\n    var a=2;\n    function a(){}\n    console.log(a);\n}\nfn(1);\n```\n以上代码输出内容？\n此前看书时有了解到变量声明会提升到作用域顶部，但忘记了变量赋值保持在原处，同时变量声明和函数声明的先后关系不确定，所以此题对我来说比较难，只能瞎蒙答案。\n\n```\nfunction  fn(a){\n    var a;\n    function a(){}\n    console.log(a);\n    a = 2;\n    console.log(a);\n}\n\nfn(1);\n```\n\n> 1. 所有全局变量都是window或Global的属性\n> 2. 函数声明会被提到范围作用域的顶端\n> 3. 变量声明被提到范围作用域的顶端\n> 4. 变量声明比函数声明优先级高，变量声明优于函数声明，如果两者同时存在，后被提升的函数声明会覆盖被提升的变量声明\n> 5. 变量赋值不会被提升，到执行行代码才开始赋值\n\n[参考博客地址](http://www.w3cplus.com/javascript/javascript-hoisting-in-details.html)，根据以上五点共识，可将代码翻译如上所示。\n\n**深入思考**\n为什么JavaScript相比较其它语言会存在声明提升？变量声明时编译器做了什么？变量赋值时编译器又做什么了？\n\n### 3.作用域和 `this`\n```\nvar a = 10;\nfunction test(){\n    a = 100;\n    console.log(a);\n    console.log(this.a);\n    var a;\n    console.log(a);\n}\ntest();\n```\n\n```\nvar a = 100;function test(){\n    console.log(a);\n    var a = 10;\n    console.log(a);\n}\ntest();\n```\n\n```\nvar a = 100;function test(){\n    console.log(a);\n    a = 10;\n    console.log(a);\n}\n\ntest();\nconsole.log(a);\n```\n\n在非严格环境下，以上三个代码分别输出什么？碰到这种题目我也是头晕眼花，稍有不慎就掉坑了。当然实际业务中不会出现这样的代码，但还是相当有必要以这样的代码来检查对 `JavaScript` 理解的程度。\n`this` 的用法参照阮一峰老师的[博客](http://javascript.ruanyifeng.com/oop/this.html)，主要分为三种情况,但总的原则是指向调用函数的那个对象。\n> * 全局环境:调用函数的对象实际为 `window` ，所以函数内的 `this` 指向 `window` ;\n> * 构造函数:通过构造函造函数生成了一个新对象，`this` 指向这个新对象。\n> * 对象的方法：函数作为对象的某个方法调用， `this` 就指向这个上级对象。\n\n故第一道题中属于全局环境， `this` 指向 `window` ，所以输出结果为：100，10，100；\n第二道题输出结果为：undefined，10；第三道题输出结果为：100，10，10；\n\n### 4.setTimeout 深入分析其机制 \n\n```\nfor (var i = 0;i<=3;i++){\n    setTimeout(function (){\n        console.log(i);\n    },0);\n}\n```\n此题输出内容是什么？\n\n`setTimeout` 为 `Window` 对象方法，用来注册在指定的事件之后单次或重复调用的函数。\n\n> setTimeout的作用是将代码推迟到指定时间执行，如果指定时间为0，即setTimeout(f,0)，那么会立刻执行吗？\n\n> 答案是不会。因为上一段说过，必须要等到当前脚本的同步任务和“任务队列”中已有的事件，全部处理完以后，才会执行setTimeout指定的任务。也就是说，setTimeout的真正作用是，在“消息队列”的现有消息的后面再添加一个消息，规定在指定时间执行某段代码。setTimeout添加的事件，会在下一次EventLoop执行。\n\n> setTimeout(f,0)将第二个参数设为0，作用是让f在现有的任务（脚本的同步任务和“消息队列”指定的任务）一结束就立刻执行。也就是说，setTimeout(f,0)的作用是，尽可能早地执行指定的任务。而并不是会立刻就执行这个任务。\n\n所以最终的结果是当前的函数执行结束之后，再去执行 `setTimeout` 定义的内容。\n\n### 5.class属性覆盖问题\n\n```\n<style>\n    .B {color:  red}\n    .A {color: blue}\n\n</style>\n\n<body>\n<p class=\"A B\">XXXXXXXXXX</p>\n</body>\n```\n最后实际的问题是什么颜色？\n存在多个类名时，类名的位置不会对属性的渲染产生影响。只有在style中定义的位置才会有影响，同一条属性，后面定义的会覆盖前面定义的属性。\n\n### 6.实现类似 jquery 的 `one` 方法\n\n即对一个元素绑定一个事件，操作一次后绑定事件失效。\n\nHTML部分：\n```\n<body>\n<p id=\"target\">XXXXXXXXXX</p>\n</body>\n```\n\nJS部分：\n```\nwindow.onload = function(){\n    var target = document.getElementById('target');\n    function fn(e){\n        alert('hello');\n        target.removeEventListener('click',fn);\n    };\n    target.addEventListener('click',fn);\n}\n\n```\n\n此代码虽可行，但没有进行封装，不便于使用。\n\n正统封装后的JS代码，使用 `arguments.callee` 表示当前 `function` ，同时需对 `event` 上的属性有所了解。\n```\nfunction oneTime(node,type,callback){\n    node.addEventListener(type,function (e){\n        e.target.removeEventListener(e.type,arguments.callee);\n        return callback(e);\n    });\n}\nfunction handle(e){\n    alert('hello!');\n}\noneTime(p,'click',handle);\n```\n\n学习前端一个月，上一周面试了大概10多家，收获的 `offer` 却是寥寥。\n为了效率，前端各方面的内容都有涉猎，深度却相当不足，面试时暴露各种问题。\n还是需深入思考，欲速则不达啊！\n\n大概是要加入大鱼或者小悟，以后工作好好努力吧！\n","slug":"几道前端面试题小记","published":1,"updated":"2017-01-25T23:38:30.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciydlqcwg0007hkfyxaei9h4n","content":"<p>最近面试了不少家，苦于前端经验薄弱，被各种血虐。做了不少家面试题，把各种不会的回来再做一遍，作为经验总结吧。</p>\n<h3 id=\"1-如何最优性能去重一个数组？\"><a href=\"#1-如何最优性能去重一个数组？\" class=\"headerlink\" title=\"1.如何最优性能去重一个数组？\"></a>1.如何最优性能去重一个数组？</h3><p>方法有好多，比如新建一个数组，原数组的内容依次往里放，若该数组元素已存在，则跳过；又或者先排序，依次比较前后两个元素是否相等，若相等，则去掉删除后一个元素。面试官有提到使用 <code>filter</code> 的方法,但是当场没想到，发现这个方法其实属于相当不错的，这种函数式的思维在某些地方相当实用。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var arr = [3,5,2,6,2,3,5,8,6]</span><br><span class=\"line\"></span><br><span class=\"line\">function distinct(arr) &#123;</span><br><span class=\"line\">    return arr.filter(function (elem,index,arr)&#123;</span><br><span class=\"line\">        return arr.indexOf(elem,index+1) === -1;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(distinct(arr));</span><br></pre></td></tr></table></figure></p>\n<p><strong>思路扩展</strong><br>比如说存在一个数组，其中元素为对象，根据对象某个属性进行排序。例如将以下data数组按age正序排列，常规的办法可能是通过比较age大小，操作对象来进行排序，这样代码会比较复杂。而更优的方法则是通过 <code>sort</code> 方法。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var data = [</span><br><span class=\"line\">&#123;name:&apos;xiaoming&apos;,age:18&#125;,</span><br><span class=\"line\">&#123;name:&apos;xiaohua&apos;,age:20&#125;,</span><br><span class=\"line\">&#123;name:&apos;xiaoli&apos;,age:25&#125;,</span><br><span class=\"line\">&#123;name:&apos;xiaozheng&apos;,age:16&#125;];</span><br></pre></td></tr></table></figure></p>\n<p>查阅 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/sort\" target=\"_blank\" rel=\"external\">MDN</a> 关于 <code>sort</code> 方法，此方法明显代码量更少，含义更加清晰。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function asc_order(data)&#123;</span><br><span class=\"line\">    return data.sort(function (a,b)&#123;</span><br><span class=\"line\">        return a.age- b.age;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"2-变量声明和函数声明提升\"><a href=\"#2-变量声明和函数声明提升\" class=\"headerlink\" title=\"2.变量声明和函数声明提升\"></a>2.变量声明和函数声明提升</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function fn(a)&#123;</span><br><span class=\"line\">    console.log(a);</span><br><span class=\"line\">    var a=2;</span><br><span class=\"line\">    function a()&#123;&#125;</span><br><span class=\"line\">    console.log(a);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">fn(1);</span><br></pre></td></tr></table></figure>\n<p>以上代码输出内容？<br>此前看书时有了解到变量声明会提升到作用域顶部，但忘记了变量赋值保持在原处，同时变量声明和函数声明的先后关系不确定，所以此题对我来说比较难，只能瞎蒙答案。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function  fn(a)&#123;</span><br><span class=\"line\">    var a;</span><br><span class=\"line\">    function a()&#123;&#125;</span><br><span class=\"line\">    console.log(a);</span><br><span class=\"line\">    a = 2;</span><br><span class=\"line\">    console.log(a);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">fn(1);</span><br></pre></td></tr></table></figure>\n<blockquote>\n<ol>\n<li>所有全局变量都是window或Global的属性</li>\n<li>函数声明会被提到范围作用域的顶端</li>\n<li>变量声明被提到范围作用域的顶端</li>\n<li>变量声明比函数声明优先级高，变量声明优于函数声明，如果两者同时存在，后被提升的函数声明会覆盖被提升的变量声明</li>\n<li>变量赋值不会被提升，到执行行代码才开始赋值</li>\n</ol>\n</blockquote>\n<p><a href=\"http://www.w3cplus.com/javascript/javascript-hoisting-in-details.html\" target=\"_blank\" rel=\"external\">参考博客地址</a>，根据以上五点共识，可将代码翻译如上所示。</p>\n<p><strong>深入思考</strong><br>为什么JavaScript相比较其它语言会存在声明提升？变量声明时编译器做了什么？变量赋值时编译器又做什么了？</p>\n<h3 id=\"3-作用域和-this\"><a href=\"#3-作用域和-this\" class=\"headerlink\" title=\"3.作用域和 this\"></a>3.作用域和 <code>this</code></h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var a = 10;</span><br><span class=\"line\">function test()&#123;</span><br><span class=\"line\">    a = 100;</span><br><span class=\"line\">    console.log(a);</span><br><span class=\"line\">    console.log(this.a);</span><br><span class=\"line\">    var a;</span><br><span class=\"line\">    console.log(a);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">test();</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var a = 100;function test()&#123;</span><br><span class=\"line\">    console.log(a);</span><br><span class=\"line\">    var a = 10;</span><br><span class=\"line\">    console.log(a);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">test();</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var a = 100;function test()&#123;</span><br><span class=\"line\">    console.log(a);</span><br><span class=\"line\">    a = 10;</span><br><span class=\"line\">    console.log(a);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">test();</span><br><span class=\"line\">console.log(a);</span><br></pre></td></tr></table></figure>\n<p>在非严格环境下，以上三个代码分别输出什么？碰到这种题目我也是头晕眼花，稍有不慎就掉坑了。当然实际业务中不会出现这样的代码，但还是相当有必要以这样的代码来检查对 <code>JavaScript</code> 理解的程度。<br><code>this</code> 的用法参照阮一峰老师的<a href=\"http://javascript.ruanyifeng.com/oop/this.html\" target=\"_blank\" rel=\"external\">博客</a>，主要分为三种情况,但总的原则是指向调用函数的那个对象。</p>\n<blockquote>\n<ul>\n<li>全局环境:调用函数的对象实际为 <code>window</code> ，所以函数内的 <code>this</code> 指向 <code>window</code> ;</li>\n<li>构造函数:通过构造函造函数生成了一个新对象，<code>this</code> 指向这个新对象。</li>\n<li>对象的方法：函数作为对象的某个方法调用， <code>this</code> 就指向这个上级对象。</li>\n</ul>\n</blockquote>\n<p>故第一道题中属于全局环境， <code>this</code> 指向 <code>window</code> ，所以输出结果为：100，10，100；<br>第二道题输出结果为：undefined，10；第三道题输出结果为：100，10，10；</p>\n<h3 id=\"4-setTimeout-深入分析其机制\"><a href=\"#4-setTimeout-深入分析其机制\" class=\"headerlink\" title=\"4.setTimeout 深入分析其机制\"></a>4.setTimeout 深入分析其机制</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for (var i = 0;i&lt;=3;i++)&#123;</span><br><span class=\"line\">    setTimeout(function ()&#123;</span><br><span class=\"line\">        console.log(i);</span><br><span class=\"line\">    &#125;,0);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>此题输出内容是什么？</p>\n<p><code>setTimeout</code> 为 <code>Window</code> 对象方法，用来注册在指定的事件之后单次或重复调用的函数。</p>\n<blockquote>\n<p>setTimeout的作用是将代码推迟到指定时间执行，如果指定时间为0，即setTimeout(f,0)，那么会立刻执行吗？</p>\n<p>答案是不会。因为上一段说过，必须要等到当前脚本的同步任务和“任务队列”中已有的事件，全部处理完以后，才会执行setTimeout指定的任务。也就是说，setTimeout的真正作用是，在“消息队列”的现有消息的后面再添加一个消息，规定在指定时间执行某段代码。setTimeout添加的事件，会在下一次EventLoop执行。</p>\n<p>setTimeout(f,0)将第二个参数设为0，作用是让f在现有的任务（脚本的同步任务和“消息队列”指定的任务）一结束就立刻执行。也就是说，setTimeout(f,0)的作用是，尽可能早地执行指定的任务。而并不是会立刻就执行这个任务。</p>\n</blockquote>\n<p>所以最终的结果是当前的函数执行结束之后，再去执行 <code>setTimeout</code> 定义的内容。</p>\n<h3 id=\"5-class属性覆盖问题\"><a href=\"#5-class属性覆盖问题\" class=\"headerlink\" title=\"5.class属性覆盖问题\"></a>5.class属性覆盖问题</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;style&gt;</span><br><span class=\"line\">    .B &#123;color:  red&#125;</span><br><span class=\"line\">    .A &#123;color: blue&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/style&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">&lt;p class=&quot;A B&quot;&gt;XXXXXXXXXX&lt;/p&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br></pre></td></tr></table></figure>\n<p>最后实际的问题是什么颜色？<br>存在多个类名时，类名的位置不会对属性的渲染产生影响。只有在style中定义的位置才会有影响，同一条属性，后面定义的会覆盖前面定义的属性。</p>\n<h3 id=\"6-实现类似-jquery-的-one-方法\"><a href=\"#6-实现类似-jquery-的-one-方法\" class=\"headerlink\" title=\"6.实现类似 jquery 的 one 方法\"></a>6.实现类似 jquery 的 <code>one</code> 方法</h3><p>即对一个元素绑定一个事件，操作一次后绑定事件失效。</p>\n<p>HTML部分：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">&lt;p id=&quot;target&quot;&gt;XXXXXXXXXX&lt;/p&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br></pre></td></tr></table></figure></p>\n<p>JS部分：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">window.onload = function()&#123;</span><br><span class=\"line\">    var target = document.getElementById(&apos;target&apos;);</span><br><span class=\"line\">    function fn(e)&#123;</span><br><span class=\"line\">        alert(&apos;hello&apos;);</span><br><span class=\"line\">        target.removeEventListener(&apos;click&apos;,fn);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    target.addEventListener(&apos;click&apos;,fn);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>此代码虽可行，但没有进行封装，不便于使用。</p>\n<p>正统封装后的JS代码，使用 <code>arguments.callee</code> 表示当前 <code>function</code> ，同时需对 <code>event</code> 上的属性有所了解。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function oneTime(node,type,callback)&#123;</span><br><span class=\"line\">    node.addEventListener(type,function (e)&#123;</span><br><span class=\"line\">        e.target.removeEventListener(e.type,arguments.callee);</span><br><span class=\"line\">        return callback(e);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">function handle(e)&#123;</span><br><span class=\"line\">    alert(&apos;hello!&apos;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">oneTime(p,&apos;click&apos;,handle);</span><br></pre></td></tr></table></figure></p>\n<p>学习前端一个月，上一周面试了大概10多家，收获的 <code>offer</code> 却是寥寥。<br>为了效率，前端各方面的内容都有涉猎，深度却相当不足，面试时暴露各种问题。<br>还是需深入思考，欲速则不达啊！</p>\n<p>大概是要加入大鱼或者小悟，以后工作好好努力吧！</p>\n","excerpt":"","more":"<p>最近面试了不少家，苦于前端经验薄弱，被各种血虐。做了不少家面试题，把各种不会的回来再做一遍，作为经验总结吧。</p>\n<h3 id=\"1-如何最优性能去重一个数组？\"><a href=\"#1-如何最优性能去重一个数组？\" class=\"headerlink\" title=\"1.如何最优性能去重一个数组？\"></a>1.如何最优性能去重一个数组？</h3><p>方法有好多，比如新建一个数组，原数组的内容依次往里放，若该数组元素已存在，则跳过；又或者先排序，依次比较前后两个元素是否相等，若相等，则去掉删除后一个元素。面试官有提到使用 <code>filter</code> 的方法,但是当场没想到，发现这个方法其实属于相当不错的，这种函数式的思维在某些地方相当实用。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var arr = [3,5,2,6,2,3,5,8,6]</span><br><span class=\"line\"></span><br><span class=\"line\">function distinct(arr) &#123;</span><br><span class=\"line\">    return arr.filter(function (elem,index,arr)&#123;</span><br><span class=\"line\">        return arr.indexOf(elem,index+1) === -1;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(distinct(arr));</span><br></pre></td></tr></table></figure></p>\n<p><strong>思路扩展</strong><br>比如说存在一个数组，其中元素为对象，根据对象某个属性进行排序。例如将以下data数组按age正序排列，常规的办法可能是通过比较age大小，操作对象来进行排序，这样代码会比较复杂。而更优的方法则是通过 <code>sort</code> 方法。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var data = [</span><br><span class=\"line\">&#123;name:&apos;xiaoming&apos;,age:18&#125;,</span><br><span class=\"line\">&#123;name:&apos;xiaohua&apos;,age:20&#125;,</span><br><span class=\"line\">&#123;name:&apos;xiaoli&apos;,age:25&#125;,</span><br><span class=\"line\">&#123;name:&apos;xiaozheng&apos;,age:16&#125;];</span><br></pre></td></tr></table></figure></p>\n<p>查阅 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/sort\">MDN</a> 关于 <code>sort</code> 方法，此方法明显代码量更少，含义更加清晰。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function asc_order(data)&#123;</span><br><span class=\"line\">    return data.sort(function (a,b)&#123;</span><br><span class=\"line\">        return a.age- b.age;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"2-变量声明和函数声明提升\"><a href=\"#2-变量声明和函数声明提升\" class=\"headerlink\" title=\"2.变量声明和函数声明提升\"></a>2.变量声明和函数声明提升</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function fn(a)&#123;</span><br><span class=\"line\">    console.log(a);</span><br><span class=\"line\">    var a=2;</span><br><span class=\"line\">    function a()&#123;&#125;</span><br><span class=\"line\">    console.log(a);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">fn(1);</span><br></pre></td></tr></table></figure>\n<p>以上代码输出内容？<br>此前看书时有了解到变量声明会提升到作用域顶部，但忘记了变量赋值保持在原处，同时变量声明和函数声明的先后关系不确定，所以此题对我来说比较难，只能瞎蒙答案。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function  fn(a)&#123;</span><br><span class=\"line\">    var a;</span><br><span class=\"line\">    function a()&#123;&#125;</span><br><span class=\"line\">    console.log(a);</span><br><span class=\"line\">    a = 2;</span><br><span class=\"line\">    console.log(a);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">fn(1);</span><br></pre></td></tr></table></figure>\n<blockquote>\n<ol>\n<li>所有全局变量都是window或Global的属性</li>\n<li>函数声明会被提到范围作用域的顶端</li>\n<li>变量声明被提到范围作用域的顶端</li>\n<li>变量声明比函数声明优先级高，变量声明优于函数声明，如果两者同时存在，后被提升的函数声明会覆盖被提升的变量声明</li>\n<li>变量赋值不会被提升，到执行行代码才开始赋值</li>\n</ol>\n</blockquote>\n<p><a href=\"http://www.w3cplus.com/javascript/javascript-hoisting-in-details.html\">参考博客地址</a>，根据以上五点共识，可将代码翻译如上所示。</p>\n<p><strong>深入思考</strong><br>为什么JavaScript相比较其它语言会存在声明提升？变量声明时编译器做了什么？变量赋值时编译器又做什么了？</p>\n<h3 id=\"3-作用域和-this\"><a href=\"#3-作用域和-this\" class=\"headerlink\" title=\"3.作用域和 this\"></a>3.作用域和 <code>this</code></h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var a = 10;</span><br><span class=\"line\">function test()&#123;</span><br><span class=\"line\">    a = 100;</span><br><span class=\"line\">    console.log(a);</span><br><span class=\"line\">    console.log(this.a);</span><br><span class=\"line\">    var a;</span><br><span class=\"line\">    console.log(a);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">test();</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var a = 100;function test()&#123;</span><br><span class=\"line\">    console.log(a);</span><br><span class=\"line\">    var a = 10;</span><br><span class=\"line\">    console.log(a);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">test();</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var a = 100;function test()&#123;</span><br><span class=\"line\">    console.log(a);</span><br><span class=\"line\">    a = 10;</span><br><span class=\"line\">    console.log(a);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">test();</span><br><span class=\"line\">console.log(a);</span><br></pre></td></tr></table></figure>\n<p>在非严格环境下，以上三个代码分别输出什么？碰到这种题目我也是头晕眼花，稍有不慎就掉坑了。当然实际业务中不会出现这样的代码，但还是相当有必要以这样的代码来检查对 <code>JavaScript</code> 理解的程度。<br><code>this</code> 的用法参照阮一峰老师的<a href=\"http://javascript.ruanyifeng.com/oop/this.html\">博客</a>，主要分为三种情况,但总的原则是指向调用函数的那个对象。</p>\n<blockquote>\n<ul>\n<li>全局环境:调用函数的对象实际为 <code>window</code> ，所以函数内的 <code>this</code> 指向 <code>window</code> ;</li>\n<li>构造函数:通过构造函造函数生成了一个新对象，<code>this</code> 指向这个新对象。</li>\n<li>对象的方法：函数作为对象的某个方法调用， <code>this</code> 就指向这个上级对象。</li>\n</ul>\n</blockquote>\n<p>故第一道题中属于全局环境， <code>this</code> 指向 <code>window</code> ，所以输出结果为：100，10，100；<br>第二道题输出结果为：undefined，10；第三道题输出结果为：100，10，10；</p>\n<h3 id=\"4-setTimeout-深入分析其机制\"><a href=\"#4-setTimeout-深入分析其机制\" class=\"headerlink\" title=\"4.setTimeout 深入分析其机制\"></a>4.setTimeout 深入分析其机制</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for (var i = 0;i&lt;=3;i++)&#123;</span><br><span class=\"line\">    setTimeout(function ()&#123;</span><br><span class=\"line\">        console.log(i);</span><br><span class=\"line\">    &#125;,0);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>此题输出内容是什么？</p>\n<p><code>setTimeout</code> 为 <code>Window</code> 对象方法，用来注册在指定的事件之后单次或重复调用的函数。</p>\n<blockquote>\n<p>setTimeout的作用是将代码推迟到指定时间执行，如果指定时间为0，即setTimeout(f,0)，那么会立刻执行吗？</p>\n<p>答案是不会。因为上一段说过，必须要等到当前脚本的同步任务和“任务队列”中已有的事件，全部处理完以后，才会执行setTimeout指定的任务。也就是说，setTimeout的真正作用是，在“消息队列”的现有消息的后面再添加一个消息，规定在指定时间执行某段代码。setTimeout添加的事件，会在下一次EventLoop执行。</p>\n<p>setTimeout(f,0)将第二个参数设为0，作用是让f在现有的任务（脚本的同步任务和“消息队列”指定的任务）一结束就立刻执行。也就是说，setTimeout(f,0)的作用是，尽可能早地执行指定的任务。而并不是会立刻就执行这个任务。</p>\n</blockquote>\n<p>所以最终的结果是当前的函数执行结束之后，再去执行 <code>setTimeout</code> 定义的内容。</p>\n<h3 id=\"5-class属性覆盖问题\"><a href=\"#5-class属性覆盖问题\" class=\"headerlink\" title=\"5.class属性覆盖问题\"></a>5.class属性覆盖问题</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;style&gt;</span><br><span class=\"line\">    .B &#123;color:  red&#125;</span><br><span class=\"line\">    .A &#123;color: blue&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/style&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">&lt;p class=&quot;A B&quot;&gt;XXXXXXXXXX&lt;/p&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br></pre></td></tr></table></figure>\n<p>最后实际的问题是什么颜色？<br>存在多个类名时，类名的位置不会对属性的渲染产生影响。只有在style中定义的位置才会有影响，同一条属性，后面定义的会覆盖前面定义的属性。</p>\n<h3 id=\"6-实现类似-jquery-的-one-方法\"><a href=\"#6-实现类似-jquery-的-one-方法\" class=\"headerlink\" title=\"6.实现类似 jquery 的 one 方法\"></a>6.实现类似 jquery 的 <code>one</code> 方法</h3><p>即对一个元素绑定一个事件，操作一次后绑定事件失效。</p>\n<p>HTML部分：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">&lt;p id=&quot;target&quot;&gt;XXXXXXXXXX&lt;/p&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br></pre></td></tr></table></figure></p>\n<p>JS部分：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">window.onload = function()&#123;</span><br><span class=\"line\">    var target = document.getElementById(&apos;target&apos;);</span><br><span class=\"line\">    function fn(e)&#123;</span><br><span class=\"line\">        alert(&apos;hello&apos;);</span><br><span class=\"line\">        target.removeEventListener(&apos;click&apos;,fn);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    target.addEventListener(&apos;click&apos;,fn);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>此代码虽可行，但没有进行封装，不便于使用。</p>\n<p>正统封装后的JS代码，使用 <code>arguments.callee</code> 表示当前 <code>function</code> ，同时需对 <code>event</code> 上的属性有所了解。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function oneTime(node,type,callback)&#123;</span><br><span class=\"line\">    node.addEventListener(type,function (e)&#123;</span><br><span class=\"line\">        e.target.removeEventListener(e.type,arguments.callee);</span><br><span class=\"line\">        return callback(e);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">function handle(e)&#123;</span><br><span class=\"line\">    alert(&apos;hello!&apos;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">oneTime(p,&apos;click&apos;,handle);</span><br></pre></td></tr></table></figure></p>\n<p>学习前端一个月，上一周面试了大概10多家，收获的 <code>offer</code> 却是寥寥。<br>为了效率，前端各方面的内容都有涉猎，深度却相当不足，面试时暴露各种问题。<br>还是需深入思考，欲速则不达啊！</p>\n<p>大概是要加入大鱼或者小悟，以后工作好好努力吧！</p>\n"},{"title":"新手程序员常犯的十个错误","date":"2017-01-25T23:26:23.000Z","_content":"\n先介绍下背景，博主由运营转行前端，入职一个月，完成了一个相对较大的模块。由于基础相对薄弱，犯下了不少错误，故想记录下来**警醒自己**和分享各位。\n\n前端技术栈是 `ES6` + `backbone` + `react` + `antdUI`,后端使用的 `Ruby on Rails`。\n\n### 1.未遵循MVC分离思想\nMVC说起来非常简单易懂，即model+view+controll，数据-视图-控制分离，特定的模块做特定的事情，便于程序的维护和拆分。我的体验是我有这个意识，却常常写出不合规范的代码。\n\n出现问题的原因是抽象是不符合人的天性的，天性就是怎么简单怎么来，不会顾及到整体架构如何。\n\n解决办法也很简单，***改！*** 不停的修改你的代码，改到完美为止！改的过程中不断告诉自己，我这样写是错的，下次不能这样写。坚持一段时间很有效果。\n\n\n### 2.缺少必要的注释\n大段的if-else缺少注释，让维护者无法快速分辨分支逻辑。特定地方存在hack或复杂逻辑的代码，缺少注释会让后来者不明所以。为了你好，也为了后来者好，请务必加上代码。说不准以后还是由你来维护这段代码。\n\n### 3.不变和变化的部分拆分\n程序员中流传着一句话，**此处不要写死，将来必改**。有经验的程序员会将一些业务层的逻辑抽象出来，写成配置文件，好处就是若后续需求有改变，只需改配置文件即可，肯定不会引入bug。\n\n### 4.忽视测试部分\n程序员中又流传着一句话，**没有测试的代码等于没写**。虽不敢全部赞同，却也有几分道理。从测试用例驱动开发，持续集成，每次编译自动跑测试用例，能够保证系统的稳定同时也减轻测试成本。自己改的的部分做好自测，理解需求，做一个**有责任心**的工程师。\n\n### 5.直接操作数据\n你应该通过方法去操作数据，而不是直接操作数据,这样能够保证你总能操作数据正确。\n例如一个类中定义的属性发生变化了，代码中所有涉及到直接操作该属性的代码都需要修改。如果通过方法操作该属性，则仅需修改操作方法，对于外部调用者，类属性变化被屏蔽了，遵循了解耦的原则，代码稳定性大大提高。\n\n### 6.代码中存在`hard code`\n`hard code`=>`魔法数字`，后果是代码中不明所以的数字到处乱飞，让人读来莫名其妙，全然不动其中的意思。如果你不想你的代码被人破译，请尽情的使用`hard code`吧\n\n### 7.写重复的代码\n`DRY,don't repeat yourself!` 这个话题聊起来估计三天三夜也说不完。电脑擅长人不愿意干的、重复的事情，所以电脑解放了人类。那么程序员如何解放自己呢？那就是不写重复的代码，其中一个准则就是三次。一件事情重复三次，就可以从中提取出规律。\n\nExample: 1， 2， 3， ....\n\nExample: 1， 2， ....\n\n\n### 8.不懂debug和如何解决问题\n**写代码从debug开始**。每一个初学C语言的人都会遇到各种各样的问题，譬如缺了分号，if判断写成赋值。初学者不了解语言和其中的坑，唯一能解决问题的就是一步一步进入代码的执行，找到其中不合预期的地方，即为`bug`所在。找一个称手的IDE，学习一下`debug`，***80%的问题就会被文档和`debug`解决***\n\n### 9.不规范的工作流\n制定合理的工作流程能够减少风险事故的可能和提高工作效率。对于程序员来说，`work flow`更意味着代码的组织，工作成员之间的协作方式。我常犯的一个错误是直接在`alpha`或`master`分支上直接commit，而团队是不允许这样做的。所有的修改必须只能通过 `merge` 的方式合并到主分支，这样的好处在于避免`bugfix`仅在`alpha`上处理，而忘记`merge`到`master`上。这些都可以通过 `CI` 或者`git hook` 等一些脚本或工具完成。\n\n---\n\n良好的编码习惯不是一日养成的，要从各个细节处不断修正提高。好的代码结构清晰，读来赏心悦目，坏的代码，混乱糟糕，让维护者忍不住骂娘。一位初学者要不断地读大师的代码，汲取其中的养分，不断修改自己的代码，祝愿各位有朝一日都能写出优雅的代码。","source":"_posts/新手程序员常犯的十个错误.md","raw":"---\ntitle: 新手程序员常犯的十个错误\ntags:\n  - JavaScript\n  - 程序人生\n  - 程序员\n  - Hexo\ndate: 2017-01-26 07:26:23\n---\n\n先介绍下背景，博主由运营转行前端，入职一个月，完成了一个相对较大的模块。由于基础相对薄弱，犯下了不少错误，故想记录下来**警醒自己**和分享各位。\n\n前端技术栈是 `ES6` + `backbone` + `react` + `antdUI`,后端使用的 `Ruby on Rails`。\n\n### 1.未遵循MVC分离思想\nMVC说起来非常简单易懂，即model+view+controll，数据-视图-控制分离，特定的模块做特定的事情，便于程序的维护和拆分。我的体验是我有这个意识，却常常写出不合规范的代码。\n\n出现问题的原因是抽象是不符合人的天性的，天性就是怎么简单怎么来，不会顾及到整体架构如何。\n\n解决办法也很简单，***改！*** 不停的修改你的代码，改到完美为止！改的过程中不断告诉自己，我这样写是错的，下次不能这样写。坚持一段时间很有效果。\n\n\n### 2.缺少必要的注释\n大段的if-else缺少注释，让维护者无法快速分辨分支逻辑。特定地方存在hack或复杂逻辑的代码，缺少注释会让后来者不明所以。为了你好，也为了后来者好，请务必加上代码。说不准以后还是由你来维护这段代码。\n\n### 3.不变和变化的部分拆分\n程序员中流传着一句话，**此处不要写死，将来必改**。有经验的程序员会将一些业务层的逻辑抽象出来，写成配置文件，好处就是若后续需求有改变，只需改配置文件即可，肯定不会引入bug。\n\n### 4.忽视测试部分\n程序员中又流传着一句话，**没有测试的代码等于没写**。虽不敢全部赞同，却也有几分道理。从测试用例驱动开发，持续集成，每次编译自动跑测试用例，能够保证系统的稳定同时也减轻测试成本。自己改的的部分做好自测，理解需求，做一个**有责任心**的工程师。\n\n### 5.直接操作数据\n你应该通过方法去操作数据，而不是直接操作数据,这样能够保证你总能操作数据正确。\n例如一个类中定义的属性发生变化了，代码中所有涉及到直接操作该属性的代码都需要修改。如果通过方法操作该属性，则仅需修改操作方法，对于外部调用者，类属性变化被屏蔽了，遵循了解耦的原则，代码稳定性大大提高。\n\n### 6.代码中存在`hard code`\n`hard code`=>`魔法数字`，后果是代码中不明所以的数字到处乱飞，让人读来莫名其妙，全然不动其中的意思。如果你不想你的代码被人破译，请尽情的使用`hard code`吧\n\n### 7.写重复的代码\n`DRY,don't repeat yourself!` 这个话题聊起来估计三天三夜也说不完。电脑擅长人不愿意干的、重复的事情，所以电脑解放了人类。那么程序员如何解放自己呢？那就是不写重复的代码，其中一个准则就是三次。一件事情重复三次，就可以从中提取出规律。\n\nExample: 1， 2， 3， ....\n\nExample: 1， 2， ....\n\n\n### 8.不懂debug和如何解决问题\n**写代码从debug开始**。每一个初学C语言的人都会遇到各种各样的问题，譬如缺了分号，if判断写成赋值。初学者不了解语言和其中的坑，唯一能解决问题的就是一步一步进入代码的执行，找到其中不合预期的地方，即为`bug`所在。找一个称手的IDE，学习一下`debug`，***80%的问题就会被文档和`debug`解决***\n\n### 9.不规范的工作流\n制定合理的工作流程能够减少风险事故的可能和提高工作效率。对于程序员来说，`work flow`更意味着代码的组织，工作成员之间的协作方式。我常犯的一个错误是直接在`alpha`或`master`分支上直接commit，而团队是不允许这样做的。所有的修改必须只能通过 `merge` 的方式合并到主分支，这样的好处在于避免`bugfix`仅在`alpha`上处理，而忘记`merge`到`master`上。这些都可以通过 `CI` 或者`git hook` 等一些脚本或工具完成。\n\n---\n\n良好的编码习惯不是一日养成的，要从各个细节处不断修正提高。好的代码结构清晰，读来赏心悦目，坏的代码，混乱糟糕，让维护者忍不住骂娘。一位初学者要不断地读大师的代码，汲取其中的养分，不断修改自己的代码，祝愿各位有朝一日都能写出优雅的代码。","slug":"新手程序员常犯的十个错误","published":1,"updated":"2017-01-25T23:40:37.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciydlqcwl000ahkfyho98p39e","content":"<p>先介绍下背景，博主由运营转行前端，入职一个月，完成了一个相对较大的模块。由于基础相对薄弱，犯下了不少错误，故想记录下来<strong>警醒自己</strong>和分享各位。</p>\n<p>前端技术栈是 <code>ES6</code> + <code>backbone</code> + <code>react</code> + <code>antdUI</code>,后端使用的 <code>Ruby on Rails</code>。</p>\n<h3 id=\"1-未遵循MVC分离思想\"><a href=\"#1-未遵循MVC分离思想\" class=\"headerlink\" title=\"1.未遵循MVC分离思想\"></a>1.未遵循MVC分离思想</h3><p>MVC说起来非常简单易懂，即model+view+controll，数据-视图-控制分离，特定的模块做特定的事情，便于程序的维护和拆分。我的体验是我有这个意识，却常常写出不合规范的代码。</p>\n<p>出现问题的原因是抽象是不符合人的天性的，天性就是怎么简单怎么来，不会顾及到整体架构如何。</p>\n<p>解决办法也很简单，<strong><em>改！</em></strong> 不停的修改你的代码，改到完美为止！改的过程中不断告诉自己，我这样写是错的，下次不能这样写。坚持一段时间很有效果。</p>\n<h3 id=\"2-缺少必要的注释\"><a href=\"#2-缺少必要的注释\" class=\"headerlink\" title=\"2.缺少必要的注释\"></a>2.缺少必要的注释</h3><p>大段的if-else缺少注释，让维护者无法快速分辨分支逻辑。特定地方存在hack或复杂逻辑的代码，缺少注释会让后来者不明所以。为了你好，也为了后来者好，请务必加上代码。说不准以后还是由你来维护这段代码。</p>\n<h3 id=\"3-不变和变化的部分拆分\"><a href=\"#3-不变和变化的部分拆分\" class=\"headerlink\" title=\"3.不变和变化的部分拆分\"></a>3.不变和变化的部分拆分</h3><p>程序员中流传着一句话，<strong>此处不要写死，将来必改</strong>。有经验的程序员会将一些业务层的逻辑抽象出来，写成配置文件，好处就是若后续需求有改变，只需改配置文件即可，肯定不会引入bug。</p>\n<h3 id=\"4-忽视测试部分\"><a href=\"#4-忽视测试部分\" class=\"headerlink\" title=\"4.忽视测试部分\"></a>4.忽视测试部分</h3><p>程序员中又流传着一句话，<strong>没有测试的代码等于没写</strong>。虽不敢全部赞同，却也有几分道理。从测试用例驱动开发，持续集成，每次编译自动跑测试用例，能够保证系统的稳定同时也减轻测试成本。自己改的的部分做好自测，理解需求，做一个<strong>有责任心</strong>的工程师。</p>\n<h3 id=\"5-直接操作数据\"><a href=\"#5-直接操作数据\" class=\"headerlink\" title=\"5.直接操作数据\"></a>5.直接操作数据</h3><p>你应该通过方法去操作数据，而不是直接操作数据,这样能够保证你总能操作数据正确。<br>例如一个类中定义的属性发生变化了，代码中所有涉及到直接操作该属性的代码都需要修改。如果通过方法操作该属性，则仅需修改操作方法，对于外部调用者，类属性变化被屏蔽了，遵循了解耦的原则，代码稳定性大大提高。</p>\n<h3 id=\"6-代码中存在hard-code\"><a href=\"#6-代码中存在hard-code\" class=\"headerlink\" title=\"6.代码中存在hard code\"></a>6.代码中存在<code>hard code</code></h3><p><code>hard code</code>=&gt;<code>魔法数字</code>，后果是代码中不明所以的数字到处乱飞，让人读来莫名其妙，全然不动其中的意思。如果你不想你的代码被人破译，请尽情的使用<code>hard code</code>吧</p>\n<h3 id=\"7-写重复的代码\"><a href=\"#7-写重复的代码\" class=\"headerlink\" title=\"7.写重复的代码\"></a>7.写重复的代码</h3><p><code>DRY,don&#39;t repeat yourself!</code> 这个话题聊起来估计三天三夜也说不完。电脑擅长人不愿意干的、重复的事情，所以电脑解放了人类。那么程序员如何解放自己呢？那就是不写重复的代码，其中一个准则就是三次。一件事情重复三次，就可以从中提取出规律。</p>\n<p>Example: 1， 2， 3， ….</p>\n<p>Example: 1， 2， ….</p>\n<h3 id=\"8-不懂debug和如何解决问题\"><a href=\"#8-不懂debug和如何解决问题\" class=\"headerlink\" title=\"8.不懂debug和如何解决问题\"></a>8.不懂debug和如何解决问题</h3><p><strong>写代码从debug开始</strong>。每一个初学C语言的人都会遇到各种各样的问题，譬如缺了分号，if判断写成赋值。初学者不了解语言和其中的坑，唯一能解决问题的就是一步一步进入代码的执行，找到其中不合预期的地方，即为<code>bug</code>所在。找一个称手的IDE，学习一下<code>debug</code>，<strong><em>80%的问题就会被文档和<code>debug</code>解决</em></strong></p>\n<h3 id=\"9-不规范的工作流\"><a href=\"#9-不规范的工作流\" class=\"headerlink\" title=\"9.不规范的工作流\"></a>9.不规范的工作流</h3><p>制定合理的工作流程能够减少风险事故的可能和提高工作效率。对于程序员来说，<code>work flow</code>更意味着代码的组织，工作成员之间的协作方式。我常犯的一个错误是直接在<code>alpha</code>或<code>master</code>分支上直接commit，而团队是不允许这样做的。所有的修改必须只能通过 <code>merge</code> 的方式合并到主分支，这样的好处在于避免<code>bugfix</code>仅在<code>alpha</code>上处理，而忘记<code>merge</code>到<code>master</code>上。这些都可以通过 <code>CI</code> 或者<code>git hook</code> 等一些脚本或工具完成。</p>\n<hr>\n<p>良好的编码习惯不是一日养成的，要从各个细节处不断修正提高。好的代码结构清晰，读来赏心悦目，坏的代码，混乱糟糕，让维护者忍不住骂娘。一位初学者要不断地读大师的代码，汲取其中的养分，不断修改自己的代码，祝愿各位有朝一日都能写出优雅的代码。</p>\n","excerpt":"","more":"<p>先介绍下背景，博主由运营转行前端，入职一个月，完成了一个相对较大的模块。由于基础相对薄弱，犯下了不少错误，故想记录下来<strong>警醒自己</strong>和分享各位。</p>\n<p>前端技术栈是 <code>ES6</code> + <code>backbone</code> + <code>react</code> + <code>antdUI</code>,后端使用的 <code>Ruby on Rails</code>。</p>\n<h3 id=\"1-未遵循MVC分离思想\"><a href=\"#1-未遵循MVC分离思想\" class=\"headerlink\" title=\"1.未遵循MVC分离思想\"></a>1.未遵循MVC分离思想</h3><p>MVC说起来非常简单易懂，即model+view+controll，数据-视图-控制分离，特定的模块做特定的事情，便于程序的维护和拆分。我的体验是我有这个意识，却常常写出不合规范的代码。</p>\n<p>出现问题的原因是抽象是不符合人的天性的，天性就是怎么简单怎么来，不会顾及到整体架构如何。</p>\n<p>解决办法也很简单，<strong><em>改！</em></strong> 不停的修改你的代码，改到完美为止！改的过程中不断告诉自己，我这样写是错的，下次不能这样写。坚持一段时间很有效果。</p>\n<h3 id=\"2-缺少必要的注释\"><a href=\"#2-缺少必要的注释\" class=\"headerlink\" title=\"2.缺少必要的注释\"></a>2.缺少必要的注释</h3><p>大段的if-else缺少注释，让维护者无法快速分辨分支逻辑。特定地方存在hack或复杂逻辑的代码，缺少注释会让后来者不明所以。为了你好，也为了后来者好，请务必加上代码。说不准以后还是由你来维护这段代码。</p>\n<h3 id=\"3-不变和变化的部分拆分\"><a href=\"#3-不变和变化的部分拆分\" class=\"headerlink\" title=\"3.不变和变化的部分拆分\"></a>3.不变和变化的部分拆分</h3><p>程序员中流传着一句话，<strong>此处不要写死，将来必改</strong>。有经验的程序员会将一些业务层的逻辑抽象出来，写成配置文件，好处就是若后续需求有改变，只需改配置文件即可，肯定不会引入bug。</p>\n<h3 id=\"4-忽视测试部分\"><a href=\"#4-忽视测试部分\" class=\"headerlink\" title=\"4.忽视测试部分\"></a>4.忽视测试部分</h3><p>程序员中又流传着一句话，<strong>没有测试的代码等于没写</strong>。虽不敢全部赞同，却也有几分道理。从测试用例驱动开发，持续集成，每次编译自动跑测试用例，能够保证系统的稳定同时也减轻测试成本。自己改的的部分做好自测，理解需求，做一个<strong>有责任心</strong>的工程师。</p>\n<h3 id=\"5-直接操作数据\"><a href=\"#5-直接操作数据\" class=\"headerlink\" title=\"5.直接操作数据\"></a>5.直接操作数据</h3><p>你应该通过方法去操作数据，而不是直接操作数据,这样能够保证你总能操作数据正确。<br>例如一个类中定义的属性发生变化了，代码中所有涉及到直接操作该属性的代码都需要修改。如果通过方法操作该属性，则仅需修改操作方法，对于外部调用者，类属性变化被屏蔽了，遵循了解耦的原则，代码稳定性大大提高。</p>\n<h3 id=\"6-代码中存在hard-code\"><a href=\"#6-代码中存在hard-code\" class=\"headerlink\" title=\"6.代码中存在hard code\"></a>6.代码中存在<code>hard code</code></h3><p><code>hard code</code>=&gt;<code>魔法数字</code>，后果是代码中不明所以的数字到处乱飞，让人读来莫名其妙，全然不动其中的意思。如果你不想你的代码被人破译，请尽情的使用<code>hard code</code>吧</p>\n<h3 id=\"7-写重复的代码\"><a href=\"#7-写重复的代码\" class=\"headerlink\" title=\"7.写重复的代码\"></a>7.写重复的代码</h3><p><code>DRY,don&#39;t repeat yourself!</code> 这个话题聊起来估计三天三夜也说不完。电脑擅长人不愿意干的、重复的事情，所以电脑解放了人类。那么程序员如何解放自己呢？那就是不写重复的代码，其中一个准则就是三次。一件事情重复三次，就可以从中提取出规律。</p>\n<p>Example: 1， 2， 3， ….</p>\n<p>Example: 1， 2， ….</p>\n<h3 id=\"8-不懂debug和如何解决问题\"><a href=\"#8-不懂debug和如何解决问题\" class=\"headerlink\" title=\"8.不懂debug和如何解决问题\"></a>8.不懂debug和如何解决问题</h3><p><strong>写代码从debug开始</strong>。每一个初学C语言的人都会遇到各种各样的问题，譬如缺了分号，if判断写成赋值。初学者不了解语言和其中的坑，唯一能解决问题的就是一步一步进入代码的执行，找到其中不合预期的地方，即为<code>bug</code>所在。找一个称手的IDE，学习一下<code>debug</code>，<strong><em>80%的问题就会被文档和<code>debug</code>解决</em></strong></p>\n<h3 id=\"9-不规范的工作流\"><a href=\"#9-不规范的工作流\" class=\"headerlink\" title=\"9.不规范的工作流\"></a>9.不规范的工作流</h3><p>制定合理的工作流程能够减少风险事故的可能和提高工作效率。对于程序员来说，<code>work flow</code>更意味着代码的组织，工作成员之间的协作方式。我常犯的一个错误是直接在<code>alpha</code>或<code>master</code>分支上直接commit，而团队是不允许这样做的。所有的修改必须只能通过 <code>merge</code> 的方式合并到主分支，这样的好处在于避免<code>bugfix</code>仅在<code>alpha</code>上处理，而忘记<code>merge</code>到<code>master</code>上。这些都可以通过 <code>CI</code> 或者<code>git hook</code> 等一些脚本或工具完成。</p>\n<hr>\n<p>良好的编码习惯不是一日养成的，要从各个细节处不断修正提高。好的代码结构清晰，读来赏心悦目，坏的代码，混乱糟糕，让维护者忍不住骂娘。一位初学者要不断地读大师的代码，汲取其中的养分，不断修改自己的代码，祝愿各位有朝一日都能写出优雅的代码。</p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"ciydlqcvz0000hkfyjz1lfljw","tag_id":"ciydlqcw90004hkfyenwz8llr","_id":"ciydlqcwo000bhkfyby7qc84k"},{"post_id":"ciydlqcw50002hkfylrbvtwjq","tag_id":"ciydlqcwk0009hkfyf4lwf5qu","_id":"ciydlqcwr000dhkfyb5mlf16y"},{"post_id":"ciydlqcwb0005hkfybsmlct2v","tag_id":"ciydlqcwp000chkfy2lokbftq","_id":"ciydlqcwt000ihkfybxfk9zke"},{"post_id":"ciydlqcwb0005hkfybsmlct2v","tag_id":"ciydlqcwr000ehkfy6mcq35km","_id":"ciydlqcwt000jhkfy8zkmiutt"},{"post_id":"ciydlqcwb0005hkfybsmlct2v","tag_id":"ciydlqcws000fhkfy1hwqzncm","_id":"ciydlqcwu000lhkfyq6k8zz2k"},{"post_id":"ciydlqcwb0005hkfybsmlct2v","tag_id":"ciydlqcwt000ghkfyxqmu64ll","_id":"ciydlqcwu000mhkfy9pfmknz0"},{"post_id":"ciydlqcwg0007hkfyxaei9h4n","tag_id":"ciydlqcwt000hhkfy6cp1hkam","_id":"ciydlqcww000qhkfy9lqi0h2j"},{"post_id":"ciydlqcwg0007hkfyxaei9h4n","tag_id":"ciydlqcwu000khkfyp6d6j8c2","_id":"ciydlqcwx000rhkfyhy0xhpoc"},{"post_id":"ciydlqcwg0007hkfyxaei9h4n","tag_id":"ciydlqcwu000nhkfy7mptsksy","_id":"ciydlqcwx000thkfyos727xov"},{"post_id":"ciydlqcwg0007hkfyxaei9h4n","tag_id":"ciydlqcw90004hkfyenwz8llr","_id":"ciydlqcwx000uhkfyiizn66vy"},{"post_id":"ciydlqcwg0007hkfyxaei9h4n","tag_id":"ciydlqcwv000ohkfyow0gg490","_id":"ciydlqcwx000whkfy9bitrzhd"},{"post_id":"ciydlqcwl000ahkfyho98p39e","tag_id":"ciydlqcwt000hhkfy6cp1hkam","_id":"ciydlqcwy000yhkfyo08cbe20"},{"post_id":"ciydlqcwl000ahkfyho98p39e","tag_id":"ciydlqcwx000shkfy91xkbktb","_id":"ciydlqcwy000zhkfypo3czbg3"},{"post_id":"ciydlqcwl000ahkfyho98p39e","tag_id":"ciydlqcwx000vhkfyp5bdkx6f","_id":"ciydlqcwy0010hkfyi2r3iea5"},{"post_id":"ciydlqcwl000ahkfyho98p39e","tag_id":"ciydlqcwx000xhkfy4nj4pypc","_id":"ciydlqcwy0011hkfyrscmvqrn"}],"Tag":[{"name":"CSS","_id":"ciydlqcw90004hkfyenwz8llr"},{"name":"git","_id":"ciydlqcwk0009hkfyf4lwf5qu"},{"name":"感悟","_id":"ciydlqcwp000chkfy2lokbftq"},{"name":"工作","_id":"ciydlqcwr000ehkfy6mcq35km"},{"name":"职场","_id":"ciydlqcws000fhkfy1hwqzncm"},{"name":"思考","_id":"ciydlqcwt000ghkfyxqmu64ll"},{"name":"JavaScript","_id":"ciydlqcwt000hhkfy6cp1hkam"},{"name":"面试","_id":"ciydlqcwu000khkfyp6d6j8c2"},{"name":"前端","_id":"ciydlqcwu000nhkfy7mptsksy"},{"name":"HTML","_id":"ciydlqcwv000ohkfyow0gg490"},{"name":"程序人生","_id":"ciydlqcwx000shkfy91xkbktb"},{"name":"程序员","_id":"ciydlqcwx000vhkfyp5bdkx6f"},{"name":"Hexo","_id":"ciydlqcwx000xhkfy4nj4pypc"}]}}